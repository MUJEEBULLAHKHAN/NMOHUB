// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMOHUM.API.Models;

#nullable disable

namespace NMOHUM.API.Migrations
{
    [DbContext(typeof(NMOHUMAuthenticationContext))]
    partial class NMOHUMAuthenticationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Clerk",
                            NormalizedName = "CLERK"
                        },
                        new
                        {
                            Id = "4",
                            Name = "ServiceAdvisor",
                            NormalizedName = "SERVICE ADVISOR"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "6",
                            Name = "InsuranceRep",
                            NormalizedName = "Insurance Representative"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "8",
                            Name = "Super Administrator",
                            NormalizedName = "Super Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NMOHUM.API.Models.AccountingCompanyReference", b =>
                {
                    b.Property<int>("AccountingCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountingCode")
                        .HasColumnType("longtext");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("AccountingCompanyId");

                    b.ToTable("AccountingCompanyReference");
                });

            modelBuilder.Entity("NMOHUM.API.Models.AccountingExpenseCategories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("accounting_expense_categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryDescription = "Vehicle Parts",
                            CategoryName = "Parts"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryDescription = "Paint",
                            CategoryName = "Paint"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryDescription = "Raw materials, consumables",
                            CategoryName = "Consumables"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryDescription = "Towing",
                            CategoryName = "Towing"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryDescription = "Towing Commisions",
                            CategoryName = "Towing Commisions"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryDescription = "Outwork,Fitment Centre,Other",
                            CategoryName = "Outwork"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.AccountingExpenses", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("ActualAmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountExVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountInclVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateVoided")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentageReceived")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpenseCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExpenseCreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpenseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsVoided")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("MarkedAsPaidBy")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierInvoiceBlobPath")
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierInvoiceReference")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("int");

                    b.HasKey("ExpenseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("ExpenseCreatedBy");

                    b.HasIndex("JobId");

                    b.HasIndex("MarkedAsPaidBy");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("accounting_expenses");
                });

            modelBuilder.Entity("NMOHUM.API.Models.AlternateContact", b =>
                {
                    b.Property<int>("AlternateContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNo")
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("AlternateContactId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AlternateContact", (string)null);
                });

            modelBuilder.Entity("NMOHUM.API.Models.AnswerType", b =>
                {
                    b.Property<int>("AnswerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnswerTypeId");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("AnswerTypeId");

                    b.ToTable("AnswerTypes");

                    b.HasData(
                        new
                        {
                            AnswerTypeId = 1,
                            Type = "Number"
                        },
                        new
                        {
                            AnswerTypeId = 2,
                            Type = "Text Box"
                        },
                        new
                        {
                            AnswerTypeId = 3,
                            Type = "Radio Button"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.AppointmentScheduleBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerMobile")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ScheduledBookInDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VehicleMakeId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleRegistration")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AppointmentScheduleBook");
                });

            modelBuilder.Entity("NMOHUM.API.Models.AssesorCompany", b =>
                {
                    b.Property<int>("AssesorCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssessorId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyBranchId")
                        .HasColumnType("int");

                    b.HasKey("AssesorCompanyId");

                    b.HasIndex("AssessorId");

                    b.ToTable("AssesorCompany");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Assessor", b =>
                {
                    b.Property<int>("AccessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BusinessName")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNo")
                        .HasColumnType("longtext");

                    b.Property<string>("Reference")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkTelephone")
                        .HasColumnType("longtext");

                    b.HasKey("AccessorId");

                    b.ToTable("Assessor", (string)null);
                });

            modelBuilder.Entity("NMOHUM.API.Models.AudatexBlockCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlockCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("QuoteItemDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("VariableType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("audatex_block_codes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockCode = 2,
                            Description = "vat percentage change",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 2,
                            BlockCode = 3,
                            Description = "mineral effect",
                            QuoteItemDescription = "",
                            Type = "paint materials",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 3,
                            BlockCode = 7,
                            Description = "excess deduction after vat",
                            QuoteItemDescription = "",
                            Type = "deductions / excess",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 4,
                            BlockCode = 8,
                            Description = "excess deduction after vat",
                            QuoteItemDescription = "",
                            Type = "deductions / excess",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 5,
                            BlockCode = 9,
                            Description = "excess deduction before vat",
                            QuoteItemDescription = "",
                            Type = "deductions / excess",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 6,
                            BlockCode = 10,
                            Description = "flat amount for spare parts with detail (parts listed in spare parts section)",
                            QuoteItemDescription = "",
                            Type = "flat amounts / additional labour",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 7,
                            BlockCode = 11,
                            Description = "nfo deduction as a flat amount on parts",
                            QuoteItemDescription = "",
                            Type = "betterment deductions",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 8,
                            BlockCode = 13,
                            Description = "amount deduction for any reusable spare parts",
                            QuoteItemDescription = "",
                            Type = "deduction reusable parts",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 9,
                            BlockCode = 14,
                            Description = "amount deduction for reusable partial bodyshell spare parts",
                            QuoteItemDescription = "",
                            Type = "deduction reusable parts",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 10,
                            BlockCode = 15,
                            Description = "amount deduction for reusable complete bodyshell spare parts",
                            QuoteItemDescription = "",
                            Type = "deduction reusable parts",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 11,
                            BlockCode = 20,
                            Description = "deductions from total amount for spare parts cost",
                            QuoteItemDescription = "",
                            Type = "spare part prices deduction/increase",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 12,
                            BlockCode = 21,
                            Description = "increase to total amount for spare parts cost",
                            QuoteItemDescription = "",
                            Type = "spare part prices deduction/increase",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 13,
                            BlockCode = 22,
                            Description = "deduction from a single spare part cost within the parts list",
                            QuoteItemDescription = "",
                            Type = "spare part prices deduction/increase",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 14,
                            BlockCode = 23,
                            Description = "increase to a single spare part cost within the parts list",
                            QuoteItemDescription = "",
                            Type = "spare part prices deduction/increase",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 15,
                            BlockCode = 24,
                            Description = "nfo spare part deduction on all parts excluding vat",
                            QuoteItemDescription = "",
                            Type = "betterment deductions",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 16,
                            BlockCode = 25,
                            Description = "nfo spare part deduction on a bodyshell excluding vat",
                            QuoteItemDescription = "",
                            Type = "betterment deductions",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 17,
                            BlockCode = 26,
                            Description = "fixed amount set as a lower limit",
                            QuoteItemDescription = "",
                            Type = "sundry parts allowance",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 18,
                            BlockCode = 27,
                            Description = "as a flat amount",
                            QuoteItemDescription = "",
                            Type = "sundry parts allowance",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 19,
                            BlockCode = 28,
                            Description = "as a % of the spare parts total before vat (system default 2%)",
                            QuoteItemDescription = "",
                            Type = "sundry parts allowance",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 20,
                            BlockCode = 29,
                            Description = "as a % of the total labour before vat",
                            QuoteItemDescription = "",
                            Type = "sundry parts allowance",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 21,
                            BlockCode = 30,
                            Description = "flat amount for labour with detail (labour listed in labour section)",
                            QuoteItemDescription = "",
                            Type = "flat amounts / additional labour",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 22,
                            BlockCode = 31,
                            Description = "total wu allowance for labour (labour listed in labour section",
                            QuoteItemDescription = "",
                            Type = "flat amounts / additional labour",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 23,
                            BlockCode = 32,
                            Description = "fixed amount for specialised labour",
                            QuoteItemDescription = "",
                            Type = "flat amounts / additional labour",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 24,
                            BlockCode = 33,
                            Description = "labour deduction on total labour",
                            QuoteItemDescription = "",
                            Type = "deduction labour",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 25,
                            BlockCode = 34,
                            Description = "labour deduction on total labour",
                            QuoteItemDescription = "",
                            Type = "deduction labour",
                            VariableType = "wu"
                        },
                        new
                        {
                            Id = 26,
                            BlockCode = 35,
                            Description = "labour deduction on partial bodyshell",
                            QuoteItemDescription = "",
                            Type = "deduction labour",
                            VariableType = "wu"
                        },
                        new
                        {
                            Id = 27,
                            BlockCode = 36,
                            Description = "labour deduction on complete bodyshell",
                            QuoteItemDescription = "",
                            Type = "deduction labour",
                            VariableType = "wu"
                        },
                        new
                        {
                            Id = 28,
                            BlockCode = 40,
                            Description = "calculated as user supplied % of painting labour",
                            QuoteItemDescription = "",
                            Type = "paint materials",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 29,
                            BlockCode = 42,
                            Description = "flat amount for painting materials on spare parts",
                            QuoteItemDescription = "",
                            Type = "paint materials",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 30,
                            BlockCode = 43,
                            Description = "flat amount for painting materials on bodyshell",
                            QuoteItemDescription = "",
                            Type = "paint materials",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 31,
                            BlockCode = 51,
                            Description = "% area according to azt specifications",
                            QuoteItemDescription = "",
                            Type = "paint materials",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 32,
                            BlockCode = 52,
                            Description = "flat amount for total paintwork (parts not listed in the paint section)",
                            QuoteItemDescription = "",
                            Type = "painting flat amounts",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 33,
                            BlockCode = 53,
                            Description = "flat amount for painting a complete / partial bodyshell",
                            QuoteItemDescription = "",
                            Type = "painting flat amounts",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 34,
                            BlockCode = 55,
                            Description = "flat amount for total paintwork (parts listed in the paint section)",
                            QuoteItemDescription = "",
                            Type = "painting flat amounts",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 35,
                            BlockCode = 56,
                            Description = "nfo paint deduction flat amount on total cost of painting",
                            QuoteItemDescription = "",
                            Type = "betterment deductions",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 36,
                            BlockCode = 58,
                            Description = "nfo paint deduction as a percentage on total cost of painting",
                            QuoteItemDescription = "",
                            Type = "betterment deductions",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 37,
                            BlockCode = 60,
                            Description = "fixed amount for railage / transportation of parts",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 38,
                            BlockCode = 61,
                            Description = "fixed amount for railage / transportation of complete or partial bodyshell",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 39,
                            BlockCode = 62,
                            Description = "excess deduction risk after vat",
                            QuoteItemDescription = "",
                            Type = "deductions / excess",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 40,
                            BlockCode = 63,
                            Description = "fixed amount for body filling materials",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 41,
                            BlockCode = 64,
                            Description = "as a % of the total labour amount for body filling materials",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 42,
                            BlockCode = 65,
                            Description = "fixed amounts for upholstry work",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 43,
                            BlockCode = 66,
                            Description = "fixed amounts for adhesive sealant",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 44,
                            BlockCode = 67,
                            Description = "fixed amounts for polishing",
                            QuoteItemDescription = "POLISHING",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 45,
                            BlockCode = 70,
                            Description = "fixed amount for underbody sealant",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 46,
                            BlockCode = 71,
                            Description = "fixed amount for underbody sealant (bodyshell)",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 47,
                            BlockCode = 72,
                            Description = "fixed amount for hollow cavity sealant",
                            QuoteItemDescription = "RUSTPROOFING SEALANT",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 48,
                            BlockCode = 73,
                            Description = "fixed amount for hollow cavity sealant (bodyshell)",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 49,
                            BlockCode = 74,
                            Description = "fixed amounts for measuring (wheel alignment). eliminates all V operations",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 50,
                            BlockCode = 76,
                            Description = "waste disposal as % of spare parts",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 51,
                            BlockCode = 77,
                            Description = "fixed amount for waste disposal",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 52,
                            BlockCode = 78,
                            Description = "waste disposal as % of paint materials",
                            QuoteItemDescription = "",
                            Type = "fixed allowances",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 53,
                            BlockCode = 88,
                            Description = "early settlement deduction from repair cost without vat",
                            QuoteItemDescription = "",
                            Type = "deductions / excess",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 54,
                            BlockCode = 89,
                            Description = "early settlement deduction from repair cost without vat",
                            QuoteItemDescription = "",
                            Type = "deductions / excess",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 55,
                            BlockCode = 90,
                            Description = "deduction pre-damage (not caculated, documentation purposes only)",
                            QuoteItemDescription = "",
                            Type = "deductions / excess",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 56,
                            BlockCode = 91,
                            Description = "excess deduction (not caculated, documentation purposes only)",
                            QuoteItemDescription = "",
                            Type = "deductions / excess",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 57,
                            BlockCode = 92,
                            Description = "as a % of the total repair cost before vat",
                            QuoteItemDescription = "",
                            Type = "sundry parts allowance",
                            VariableType = "percent"
                        },
                        new
                        {
                            Id = 58,
                            BlockCode = 93,
                            Description = "fixed amount set as a higher limit",
                            QuoteItemDescription = "",
                            Type = "sundry parts allowance",
                            VariableType = "curr"
                        },
                        new
                        {
                            Id = 59,
                            BlockCode = 95,
                            Description = "deduction pre-damage calculated on total repair cost",
                            QuoteItemDescription = "",
                            Type = "deductions / excess",
                            VariableType = "percent"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.AudatexShellAssessments", b =>
                {
                    b.Property<int>("AudatexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AssessmentNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimReference")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Originator")
                        .HasColumnType("longtext");

                    b.Property<string>("Registration")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("AudatexId");

                    b.ToTable("AudatexShellAssessments");
                });

            modelBuilder.Entity("NMOHUM.API.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("longtext");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext");

                    b.Property<int>("ParentEntityId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("NMOHUM.API.Models.AuditexModels.AudatexAuth", b =>
                {
                    b.Property<int>("AudatexAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AudaAccessToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("AudatexAuthId");

                    b.ToTable("AudatexAuth");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Broker", b =>
                {
                    b.Property<int>("BrokerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BrokerName")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Telephone")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("BrokerId");

                    b.ToTable("Broker", (string)null);
                });

            modelBuilder.Entity("NMOHUM.API.Models.CategoryType", b =>
                {
                    b.Property<int>("CategoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryTypeId");

                    b.ToTable("CategoryType");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ClaimHandler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimHandlerName")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Telephone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ClaimHandler");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ClaimHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClaimHistory");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ClientVehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BodyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("EngineNo")
                        .HasColumnType("longtext");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<string>("MandMCode")
                        .HasColumnType("longtext");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("Odometer")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("TyreMakeId")
                        .HasColumnType("int");

                    b.Property<int>("TyreSize")
                        .HasColumnType("int");

                    b.Property<int>("UnderWarranty")
                        .HasColumnType("int");

                    b.Property<string>("VehicleMarketValue")
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleRetailValue")
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleTradeValue")
                        .HasColumnType("longtext");

                    b.Property<int>("VehicleYear")
                        .HasColumnType("int");

                    b.Property<int>("VinCofirmed")
                        .HasColumnType("int");

                    b.Property<string>("VinNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("VehicleId");

                    b.HasIndex("ColorId");

                    b.HasIndex("MakeId");

                    b.HasIndex("ModelId");

                    b.ToTable("ClientVehicle", (string)null);
                });

            modelBuilder.Entity("NMOHUM.API.Models.ClientVehicles", b =>
                {
                    b.Property<int>("ClientVehiclesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEdit")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UnderWarranty")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("VinCofirmed")
                        .HasColumnType("int");

                    b.HasKey("ClientVehiclesId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ClientVehicles", (string)null);
                });

            modelBuilder.Entity("NMOHUM.API.Models.CommunicationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MethodType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("communication_methods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsEnabled = true,
                            MethodType = "SMS"
                        },
                        new
                        {
                            Id = 2,
                            IsEnabled = true,
                            MethodType = "WhatsApp"
                        },
                        new
                        {
                            Id = 3,
                            IsEnabled = true,
                            MethodType = "Email"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.CompanyBranch", b =>
                {
                    b.Property<int>("CompanyBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressCode")
                        .HasColumnType("longtext");

                    b.Property<string>("AddressPlace")
                        .HasColumnType("longtext");

                    b.Property<string>("AddressTown")
                        .HasColumnType("longtext");

                    b.Property<string>("BranchName")
                        .HasColumnType("longtext");

                    b.Property<int?>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalMbrReferenceCode")
                        .HasColumnType("longtext");

                    b.Property<string>("FaxNo")
                        .HasColumnType("longtext");

                    b.Property<string>("FullStreetAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupHoldingName")
                        .HasColumnType("longtext");

                    b.Property<int?>("IsOem")
                        .HasColumnType("int");

                    b.Property<int?>("IsPhysicalAddress")
                        .HasColumnType("int");

                    b.Property<int?>("IsVatExempt")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTermsInDays")
                        .HasColumnType("int");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("PostalPlace")
                        .HasColumnType("longtext");

                    b.Property<string>("Province")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("SettlementDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StreetAddressName")
                        .HasColumnType("longtext");

                    b.Property<string>("StreetAddressNo")
                        .HasColumnType("longtext");

                    b.Property<string>("Telephone")
                        .HasColumnType("longtext");

                    b.Property<string>("VatNo")
                        .HasColumnType("longtext");

                    b.HasKey("CompanyBranchId");

                    b.ToTable("CompanyBranch");

                    b.HasData(
                        new
                        {
                            CompanyBranchId = 1,
                            BranchName = "Stock",
                            CompanyTypeId = 2,
                            IsVatExempt = 0
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyTypeDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyTypeDescription = "Insurance Company"
                        },
                        new
                        {
                            Id = 2,
                            CompanyTypeDescription = "Part Supplier"
                        },
                        new
                        {
                            Id = 3,
                            CompanyTypeDescription = "Towing Company"
                        },
                        new
                        {
                            Id = 4,
                            CompanyTypeDescription = "Fitment Centre"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ContactClient", b =>
                {
                    b.Property<int>("ContactClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactClientId");

                    b.Property<string>("CommunicationType")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeliveryStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("From")
                        .HasColumnType("longtext");

                    b.Property<string>("IncomingWhatsAppProfileName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsInBoundMessage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsNonConversationMessage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendSms")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SmsNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("TemplateSentDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("To")
                        .HasColumnType("longtext");

                    b.Property<string>("TwilioWhatsAppConversationId")
                        .HasColumnType("longtext");

                    b.Property<string>("UniqueMessageId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<int>("WhatsAppConversationId_Internal_FK")
                        .HasColumnType("int");

                    b.HasKey("ContactClientId");

                    b.ToTable("ContactClient");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .HasColumnType("longtext");

                    b.Property<double>("VatAmount")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryName = "South Africa",
                            VatAmount = 15.0
                        },
                        new
                        {
                            Id = 2,
                            CountryName = "Saudia Arabia",
                            VatAmount = 15.0
                        },
                        new
                        {
                            Id = 3,
                            CountryName = "United Kingdom",
                            VatAmount = 15.0
                        },
                        new
                        {
                            Id = 4,
                            CountryName = "Namibia",
                            VatAmount = 15.0
                        },
                        new
                        {
                            Id = 5,
                            CountryName = "Botswana",
                            VatAmount = 15.0
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.CourtesyCarLog", b =>
                {
                    b.Property<int>("CourtesyCarLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourtesyCarLogId");

                    b.Property<string>("CapturedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<int>("CourtesyCarId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerMobile")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCaptured")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("MileageIn")
                        .HasColumnType("int");

                    b.Property<int>("MileageOut")
                        .HasColumnType("int");

                    b.Property<string>("ReturnCarComment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CourtesyCarLogId");

                    b.ToTable("CourtesyCarLog");
                });

            modelBuilder.Entity("NMOHUM.API.Models.CsiModels.CsiCompanies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("csi_companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "AUTO MX",
                            Enabled = true
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "BAMS",
                            Enabled = true
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "LIGHTSTONE",
                            Enabled = true
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.CsiModels.CsiCompaniesManufacturerApprovals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CsiCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleManufactuerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("csi_companies_manufacturer_approvals");
                });

            modelBuilder.Entity("NMOHUM.API.Models.CsiModels.CsiJobSubmissionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("csi_job_submission_detail");
                });

            modelBuilder.Entity("NMOHUM.API.Models.CsiModels.CsiMasterSubmissionDetail", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CsiCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HttpResponseCode")
                        .HasColumnType("longtext");

                    b.Property<string>("HttpResponseMessage")
                        .HasColumnType("longtext");

                    b.Property<int>("RecordsSubmitted")
                        .HasColumnType("int");

                    b.Property<int>("SubmittedBy")
                        .HasColumnType("int");

                    b.HasKey("BatchId");

                    b.ToTable("csi_master_submission_detail");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("longtext");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("longtext");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency", (string)null);

                    b.HasData(
                        new
                        {
                            CurrencyId = 1,
                            CurrencyName = "ZAR",
                            CurrencySymbol = "R"
                        },
                        new
                        {
                            CurrencyId = 2,
                            CurrencyName = "USD",
                            CurrencySymbol = "$"
                        },
                        new
                        {
                            CurrencyId = 3,
                            CurrencyName = "EUR",
                            CurrencySymbol = "€"
                        },
                        new
                        {
                            CurrencyId = 4,
                            CurrencyName = "BWP",
                            CurrencySymbol = "P"
                        },
                        new
                        {
                            CurrencyId = 5,
                            CurrencyName = "NAD",
                            CurrencySymbol = "$"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityTown")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<int>("CsiConsent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateSignedIn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstNames")
                        .HasColumnType("longtext");

                    b.Property<string>("FullAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeTelephone")
                        .HasColumnType("longtext");

                    b.Property<int>("IsCompany")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Province")
                        .HasColumnType("longtext");

                    b.Property<string>("StreetName")
                        .HasColumnType("longtext");

                    b.Property<string>("StreetNo")
                        .HasColumnType("longtext");

                    b.Property<string>("UniqueSecurityNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WorkTelephone")
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("NMOHUM.API.Models.Disclaimer", b =>
                {
                    b.Property<int>("DisclaimerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DisclaimerTypeId");

                    b.Property<string>("DisclaimerText")
                        .HasColumnType("longtext");

                    b.Property<string>("DisclaimerType")
                        .HasColumnType("longtext");

                    b.HasKey("DisclaimerTypeId");

                    b.ToTable("Disclaimers");

                    b.HasData(
                        new
                        {
                            DisclaimerTypeId = 1,
                            DisclaimerText = "",
                            DisclaimerType = "Quotation Disclaimer"
                        },
                        new
                        {
                            DisclaimerTypeId = 2,
                            DisclaimerText = "",
                            DisclaimerType = "Invoice Disclaimer"
                        },
                        new
                        {
                            DisclaimerTypeId = 3,
                            DisclaimerText = "",
                            DisclaimerType = "Excess Disclaimer"
                        },
                        new
                        {
                            DisclaimerTypeId = 4,
                            DisclaimerText = "",
                            DisclaimerType = "General Disclaimer"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.DocumentTemplate", b =>
                {
                    b.Property<int>("DocumentTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentTemplateId");

                    b.Property<string>("Template")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("DocumentTemplateId");

                    b.ToTable("DocumentTemplate");
                });

            modelBuilder.Entity("NMOHUM.API.Models.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmailTemplateId");

                    b.Property<string>("Template")
                        .HasColumnType("longtext");

                    b.Property<string>("TemplateFor")
                        .HasColumnType("longtext");

                    b.Property<int?>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityTown")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Department")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstNames")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("HomeTelephone")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("SignatureUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("StreetName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("StreetNo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("WorkTelephone")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("NMOHUM.API.Models.EmployeeWorkshops", b =>
                {
                    b.Property<int>("EmployeeWorkShopsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeWorkShopsId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("EmployeeWorkshops");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ExternalCompanyEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ExternalCompanyEmails");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Images", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageId");

                    b.Property<string>("FileType")
                        .HasColumnType("longtext");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageType")
                        .HasColumnType("longtext");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("NMOHUM.API.Models.InsuranceClaim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccessorId")
                        .HasColumnType("int");

                    b.Property<double>("Betterment")
                        .HasColumnType("double");

                    b.Property<int?>("BrokerId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimHandlerId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClaimRefName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("ClaimRepairValue")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfIncident")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("ExcessOptionOneMinimum")
                        .HasColumnType("double");

                    b.Property<double?>("ExcessOptionOnePercentage")
                        .HasColumnType("double");

                    b.Property<decimal?>("ExcessOptionOneTotalCalculatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("ExcessOptionTwoMinimum")
                        .HasColumnType("double");

                    b.Property<double?>("ExcessOptionTwoPercentage")
                        .HasColumnType("double");

                    b.Property<decimal?>("ExcessOptionTwoTotalCalculatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("ExcessPercentValue")
                        .HasColumnType("double");

                    b.Property<double>("ExcessValue")
                        .HasColumnType("double");

                    b.Property<int>("ExcessValueTBA")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExcessVatPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("ExcessWaiver")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("GrandTotalOfAllExcessAmounts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("InsuredAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("PolicyNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("VatAmountOnBasicExcess")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatOnExcessOptionOne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatOnExcessOptionTwo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatOnGrandTotalOfExcess")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ClaimId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("JobId");

                    b.ToTable("InsuranceClaim");
                });

            modelBuilder.Entity("NMOHUM.API.Models.InvoiceData", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BillTo")
                        .HasColumnType("longtext");

                    b.Property<int?>("CancelledBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CityAddress")
                        .HasColumnType("longtext");

                    b.Property<int?>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerVatNo")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("double");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("FinalTotalAfterDeductions")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FullAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralInvoiceNotes")
                        .HasColumnType("longtext");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("double");

                    b.Property<string>("ImportDataFrom")
                        .HasColumnType("longtext");

                    b.Property<string>("InvoiceBlobUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int?>("InvoicePaidBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvoicePaidDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("NettTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("Paid")
                        .HasColumnType("int");

                    b.Property<int?>("PartiallyPaid")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseOrder")
                        .HasColumnType("longtext");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("longtext");

                    b.Property<double?>("SubTotal")
                        .HasColumnType("double");

                    b.Property<string>("SuburbAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("TotalDeductions")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalInclVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("TotalInclVatAmount")
                        .HasColumnType("double");

                    b.Property<double?>("TotalVatAmount")
                        .HasColumnType("double");

                    b.Property<string>("VatNo")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("VatPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("JobId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("InvoiceData", (string)null);
                });

            modelBuilder.Entity("NMOHUM.API.Models.InvoiceLineItem", b =>
                {
                    b.Property<int>("InvoiceLineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceLineItemId");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<decimal?>("AmountExVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountInclVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceLineItemId");

                    b.ToTable("Invoicelineitem");
                });

            modelBuilder.Entity("NMOHUM.API.Models.JobActivities", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedById")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DepartmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("isCompleted")
                        .HasColumnType("int");

                    b.Property<int>("isCurrentActivity")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("JobId");

                    b.ToTable("JobActivities");
                });

            modelBuilder.Entity("NMOHUM.API.Models.JobActivityStatusAssignedEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeAssignedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JobActivityStatusAssignedEmployee");
                });

            modelBuilder.Entity("NMOHUM.API.Models.JobCards", b =>
                {
                    b.Property<int>("JobCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("GuideNumber")
                        .HasColumnType("int");

                    b.Property<double?>("Hours")
                        .HasColumnType("double");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<double>("LabourRate")
                        .HasColumnType("double");

                    b.Property<double?>("Markup")
                        .HasColumnType("double");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoteItemId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteItemTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("WorkUnits")
                        .HasColumnType("double");

                    b.HasKey("JobCardId");

                    b.HasIndex("JobId");

                    b.HasIndex("QuoteItemTypeId");

                    b.ToTable("JobCards");
                });

            modelBuilder.Entity("NMOHUM.API.Models.JobTaskDetails", b =>
                {
                    b.Property<int>("JobTaskDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignTo")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsTaskCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TaskReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("JobTaskDetailId");

                    b.ToTable("job_task_details");
                });

            modelBuilder.Entity("NMOHUM.API.Models.JobTaskQuoteItem", b =>
                {
                    b.Property<int>("JobTaskQuoteItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobTaskQuoteItemId");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsTaskCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JobTaskDetailId")
                        .HasColumnType("int");

                    b.Property<decimal?>("LabourHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteItemId")
                        .HasColumnType("int");

                    b.HasKey("JobTaskQuoteItemId");

                    b.ToTable("job_task_quote_item");
                });

            modelBuilder.Entity("NMOHUM.API.Models.JobTypes", b =>
                {
                    b.Property<int>("JobTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("JobType")
                        .HasColumnType("longtext");

                    b.HasKey("JobTypeId");

                    b.ToTable("JobTypes", (string)null);

                    b.HasData(
                        new
                        {
                            JobTypeId = 1,
                            JobType = "Customer To Pay"
                        },
                        new
                        {
                            JobTypeId = 2,
                            JobType = "Dealer"
                        },
                        new
                        {
                            JobTypeId = 3,
                            JobType = "Fleet"
                        },
                        new
                        {
                            JobTypeId = 4,
                            JobType = "Insurance"
                        },
                        new
                        {
                            JobTypeId = 5,
                            JobType = "Motor Plan"
                        },
                        new
                        {
                            JobTypeId = 6,
                            JobType = "Third Party"
                        },
                        new
                        {
                            JobTypeId = 7,
                            JobType = "Warranty"
                        },
                        new
                        {
                            JobTypeId = 8,
                            JobType = "Out Of Warranty"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.Jobs", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualRepairStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AssessmentGuid")
                        .HasColumnType("longtext");

                    b.Property<string>("AssessmentNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("AuthorisedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollectedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CurrentActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentPartStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DamageReportNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateAuthorised")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EditedById")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("EstimatorId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("longtext");

                    b.Property<string>("IntegrationPlatform")
                        .HasColumnType("longtext");

                    b.Property<int?>("IsAuthorised")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCollected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDrivable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsNotInsured")
                        .HasColumnType("int");

                    b.Property<bool?>("IsReadyForCollection")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsRepeatJob")
                        .HasColumnType("int");

                    b.Property<bool?>("IsTotalLoss")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IsTowed")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JobComplete")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("JobConvertedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("JobDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("JobImportedViaIntegration")
                        .HasColumnType("int");

                    b.Property<string>("JobNotes")
                        .HasColumnType("longtext");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LastEditedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastStatusUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("Obid")
                        .HasColumnType("char(36)");

                    b.Property<string>("OldRepairOrderNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Originator")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PartStatusLastUpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("RepairComplete_ReadyForCollectionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RepairOrderNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ScheduledBookInDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ScheduledCompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ServiceAdvisorId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleOnSite")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EditedById");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Labour", b =>
                {
                    b.Property<int>("LabourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int?>("AssessorApproved")
                        .HasColumnType("int");

                    b.Property<string>("AssessorComments")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("GuidNumber")
                        .HasColumnType("int");

                    b.Property<double>("Hours")
                        .HasColumnType("double");

                    b.Property<double>("LabourRate")
                        .HasColumnType("double");

                    b.Property<string>("LabourType")
                        .HasColumnType("longtext");

                    b.Property<int>("QuoteItemId")
                        .HasColumnType("int");

                    b.Property<int?>("RepApprove")
                        .HasColumnType("int");

                    b.Property<int?>("RepairMethodId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("WUCount")
                        .HasColumnType("double");

                    b.Property<int>("isAdditional")
                        .HasColumnType("int");

                    b.HasKey("LabourId");

                    b.HasIndex("QuoteItemId");

                    b.HasIndex("RepairMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Labour");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Outwork", b =>
                {
                    b.Property<int>("OutworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CapturedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("CostPrice")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateOfOutwork")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobsJobId")
                        .HasColumnType("int");

                    b.Property<double>("Markup")
                        .HasColumnType("double");

                    b.Property<string>("OutworkDescription")
                        .HasColumnType("longtext");

                    b.Property<double>("RetailPrice")
                        .HasColumnType("double");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("OutworkId");

                    b.HasIndex("JobsJobId");

                    b.HasIndex("UserId");

                    b.ToTable("Outwork");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Paint", b =>
                {
                    b.Property<int>("PaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Additional")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("AssesorComment")
                        .HasColumnType("longtext");

                    b.Property<double>("AssessorAdjustment")
                        .HasColumnType("double");

                    b.Property<int?>("AssessorApproved")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("GuideNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuoteItemId")
                        .HasColumnType("int");

                    b.Property<int>("RepApproved")
                        .HasColumnType("int");

                    b.Property<int?>("RepairMethodId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("WorkUnits")
                        .HasColumnType("double");

                    b.HasKey("PaintId");

                    b.HasIndex("QuoteItemId");

                    b.HasIndex("RepairMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Paint");
                });

            modelBuilder.Entity("NMOHUM.API.Models.PaintedPanels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobsJobId")
                        .HasColumnType("int");

                    b.Property<string>("PaintType")
                        .HasColumnType("longtext");

                    b.Property<string>("PanelType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("JobsJobId");

                    b.ToTable("PaintedPanels");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int?>("AssessorApproved")
                        .HasColumnType("int");

                    b.Property<string>("AssessorComments")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("GuidNumber")
                        .HasColumnType("int");

                    b.Property<double?>("Markup")
                        .HasColumnType("double");

                    b.Property<string>("PartNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PartType")
                        .HasColumnType("longtext");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoteItemId")
                        .HasColumnType("int");

                    b.Property<int?>("RepApprove")
                        .HasColumnType("int");

                    b.Property<int?>("RepairMethodId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("WUCount")
                        .HasColumnType("int");

                    b.Property<int>("isAdditional")
                        .HasColumnType("int");

                    b.HasKey("PartId");

                    b.HasIndex("QuoteItemId");

                    b.HasIndex("RepairMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Part");
                });

            modelBuilder.Entity("NMOHUM.API.Models.PartStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("PartStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("part_status_history");
                });

            modelBuilder.Entity("NMOHUM.API.Models.PartStatusOptions", b =>
                {
                    b.Property<int>("PartStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("SequenceId")
                        .HasColumnType("int");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("longtext");

                    b.HasKey("PartStatusId");

                    b.ToTable("part_status_options");

                    b.HasData(
                        new
                        {
                            PartStatusId = 1,
                            SequenceId = 1,
                            StatusDescription = "Quote Sent"
                        },
                        new
                        {
                            PartStatusId = 2,
                            SequenceId = 2,
                            StatusDescription = "Quote Received"
                        },
                        new
                        {
                            PartStatusId = 3,
                            SequenceId = 3,
                            StatusDescription = "Order Placed"
                        },
                        new
                        {
                            PartStatusId = 4,
                            SequenceId = 4,
                            StatusDescription = "Order Received"
                        },
                        new
                        {
                            PartStatusId = 5,
                            SequenceId = 5,
                            StatusDescription = "Parts On Back Order"
                        },
                        new
                        {
                            PartStatusId = 6,
                            SequenceId = 6,
                            StatusDescription = "Awaiting Invoice"
                        },
                        new
                        {
                            PartStatusId = 7,
                            SequenceId = 7,
                            StatusDescription = "Parts Invoiced"
                        },
                        new
                        {
                            PartStatusId = 8,
                            SequenceId = 8,
                            StatusDescription = "Payment To Be Made"
                        },
                        new
                        {
                            PartStatusId = 9,
                            SequenceId = 9,
                            StatusDescription = "Payment Complete"
                        },
                        new
                        {
                            PartStatusId = 10,
                            SequenceId = 10,
                            StatusDescription = "RFC Requested"
                        },
                        new
                        {
                            PartStatusId = 11,
                            SequenceId = 11,
                            StatusDescription = "RFC Approved"
                        },
                        new
                        {
                            PartStatusId = 12,
                            SequenceId = 12,
                            StatusDescription = "Final Costed"
                        },
                        new
                        {
                            PartStatusId = 13,
                            SequenceId = 13,
                            StatusDescription = "Complete"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.PartTypes", b =>
                {
                    b.Property<int>("PartTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AudatexPartTypeNaming")
                        .HasColumnType("longtext");

                    b.Property<string>("PartTypeDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ShortenedName")
                        .HasColumnType("longtext");

                    b.HasKey("PartTypeId");

                    b.ToTable("part_types");

                    b.HasData(
                        new
                        {
                            PartTypeId = 1,
                            AudatexPartTypeNaming = "OemParts",
                            PartTypeDescription = "OEM Parts",
                            ShortenedName = "OEM"
                        },
                        new
                        {
                            PartTypeId = 2,
                            AudatexPartTypeNaming = "AlternativeParts",
                            PartTypeDescription = "Alternate",
                            ShortenedName = "Alt"
                        },
                        new
                        {
                            PartTypeId = 3,
                            AudatexPartTypeNaming = "UsedOEMPart",
                            PartTypeDescription = "Used OEM",
                            ShortenedName = "Used O"
                        },
                        new
                        {
                            PartTypeId = 4,
                            AudatexPartTypeNaming = "OtherParts",
                            PartTypeDescription = "Used Alternate",
                            ShortenedName = "Used A"
                        },
                        new
                        {
                            PartTypeId = 5,
                            AudatexPartTypeNaming = "OtherParts",
                            PartTypeDescription = "TBA",
                            ShortenedName = "TBA"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("double");

                    b.Property<DateTime>("CapturedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobsJobId")
                        .HasColumnType("int");

                    b.Property<int>("PaidByTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PayReference")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentForId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("PaymentId");

                    b.HasIndex("JobsJobId");

                    b.HasIndex("PaidByTypeId");

                    b.HasIndex("PaymentForId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("NMOHUM.API.Models.QualityControlQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("AnswerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("quality_control_questions");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("AudatexGrandTotalInclVat")
                        .HasColumnType("double");

                    b.Property<double?>("AudatexTotalExVat")
                        .HasColumnType("double");

                    b.Property<decimal?>("BettermentValueExVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BettermentValueInclVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Deductions")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FirstAuthorisedAmountExVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GrandTotalExclVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GrandTotalIncludingVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GrandTotalOfQuoteLessDeductions")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<double?>("LabourPaintAmt")
                        .HasColumnType("double");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("Obid")
                        .HasColumnType("char(36)");

                    b.Property<double?>("PaintMaterialAmt")
                        .HasColumnType("double");

                    b.Property<decimal?>("PaintSundriesPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("PaintSupplies")
                        .HasColumnType("double");

                    b.Property<decimal?>("PartSundriesPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("PartsAssessmentLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("PendingAdditionalItemsTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("ShopSupplies")
                        .HasColumnType("double");

                    b.Property<double?>("SundriesCost")
                        .HasColumnType("double");

                    b.Property<double>("TotalAdditionalCosts")
                        .HasColumnType("double");

                    b.Property<decimal?>("TotalAdditionalLabourAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAdditionalLabourHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAdditionalOtherAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAdditionalPaintAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAdditionalPartInclMarkup")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAdditionalPartNetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAdditionalStripAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAdditionalStripHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalFrameAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalFrameHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalLabourAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("TotalLabourAmt")
                        .HasColumnType("double");

                    b.Property<decimal?>("TotalLabourHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalNetPartsAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalOtherAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPaintAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPaintHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPaintSundriesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPartSundriesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPartsInclMarkUp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalStripAssembleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalStripAssembleHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatOnBettermentPortion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("WasteDisposalCost")
                        .HasColumnType("double");

                    b.Property<int>("isQuoteApproved")
                        .HasColumnType("int");

                    b.Property<int?>("rateAgreementId")
                        .HasColumnType("int");

                    b.HasKey("QuoteId");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("NMOHUM.API.Models.QuoteItem", b =>
                {
                    b.Property<int>("QuoteItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdditionalActionedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AdditionalActionedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("AdditionalApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("AdditionalRequestedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AdditionalRequestedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("Amount")
                        .HasColumnType("double");

                    b.Property<int?>("AssessorApproved")
                        .HasColumnType("int");

                    b.Property<string>("AssessorComments")
                        .HasColumnType("longtext");

                    b.Property<string>("AudatexLabourItemObid")
                        .HasColumnType("longtext");

                    b.Property<string>("AudatexPaintItemObid")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("FrameAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FrameHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GuideNumber")
                        .HasColumnType("int");

                    b.Property<double?>("Hours")
                        .HasColumnType("double");

                    b.Property<string>("IdBlockCodeReference")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsBettermentItem")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPartPriceDifferenceField")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("LabourAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LabourHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("LabourRate")
                        .HasColumnType("double");

                    b.Property<string>("LabourType")
                        .HasColumnType("longtext");

                    b.Property<int?>("LineNumber")
                        .HasColumnType("int");

                    b.Property<double?>("Markup")
                        .HasColumnType("double");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int?>("OriginalQuoteItemIdReference")
                        .HasColumnType("int");

                    b.Property<decimal?>("OtherAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PaintAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PaintHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ParentQuoteItemTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PartAmountInclMarkUp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PartAmountNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PartNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PartType")
                        .HasColumnType("longtext");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteItemTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RepApprove")
                        .HasColumnType("int");

                    b.Property<int?>("RepairMethodId")
                        .HasColumnType("int");

                    b.Property<decimal?>("StripAssembleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("StripAssembleHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SuggestedPartSupplier")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<int?>("WUCount")
                        .HasColumnType("int");

                    b.Property<double?>("WorkUnits")
                        .HasColumnType("double");

                    b.Property<int>("isAdditional")
                        .HasColumnType("int");

                    b.HasKey("QuoteItemId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("QuoteItemTypeId");

                    b.ToTable("QuoteItem");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.ActivityStatus", b =>
                {
                    b.Property<int>("ActivityStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityDesc")
                        .HasColumnType("longtext");

                    b.HasKey("ActivityStatusId");

                    b.ToTable("ActivityStatus");

                    b.HasData(
                        new
                        {
                            ActivityStatusId = -1,
                            ActivityDesc = "No Sub Department"
                        },
                        new
                        {
                            ActivityStatusId = 1,
                            ActivityDesc = "Onsite for Assessment"
                        },
                        new
                        {
                            ActivityStatusId = 2,
                            ActivityDesc = "To be Authorised"
                        },
                        new
                        {
                            ActivityStatusId = 3,
                            ActivityDesc = "Not Authorised"
                        },
                        new
                        {
                            ActivityStatusId = 4,
                            ActivityDesc = "Authorised"
                        },
                        new
                        {
                            ActivityStatusId = 5,
                            ActivityDesc = "Ready to be Booked"
                        },
                        new
                        {
                            ActivityStatusId = 6,
                            ActivityDesc = "Booked for Repairs"
                        },
                        new
                        {
                            ActivityStatusId = 7,
                            ActivityDesc = "To be Made"
                        },
                        new
                        {
                            ActivityStatusId = 8,
                            ActivityDesc = "Made & Not Pre-Ordered"
                        },
                        new
                        {
                            ActivityStatusId = 9,
                            ActivityDesc = "Release Fee Charges"
                        },
                        new
                        {
                            ActivityStatusId = 10,
                            ActivityDesc = "Not Pre-Ordered"
                        },
                        new
                        {
                            ActivityStatusId = 11,
                            ActivityDesc = "Made"
                        },
                        new
                        {
                            ActivityStatusId = 12,
                            ActivityDesc = "No Charges"
                        },
                        new
                        {
                            ActivityStatusId = 13,
                            ActivityDesc = "Loading"
                        },
                        new
                        {
                            ActivityStatusId = 14,
                            ActivityDesc = "Cancelled"
                        },
                        new
                        {
                            ActivityStatusId = 15,
                            ActivityDesc = "Stripping"
                        },
                        new
                        {
                            ActivityStatusId = 16,
                            ActivityDesc = "To Order"
                        },
                        new
                        {
                            ActivityStatusId = 17,
                            ActivityDesc = "Partially Ordered"
                        },
                        new
                        {
                            ActivityStatusId = 18,
                            ActivityDesc = "Received"
                        },
                        new
                        {
                            ActivityStatusId = 19,
                            ActivityDesc = "Backorder"
                        },
                        new
                        {
                            ActivityStatusId = 20,
                            ActivityDesc = "Required"
                        },
                        new
                        {
                            ActivityStatusId = 21,
                            ActivityDesc = "Logged"
                        },
                        new
                        {
                            ActivityStatusId = 22,
                            ActivityDesc = "Speedbump"
                        },
                        new
                        {
                            ActivityStatusId = 23,
                            ActivityDesc = "Inline"
                        },
                        new
                        {
                            ActivityStatusId = 24,
                            ActivityDesc = "Dealership"
                        },
                        new
                        {
                            ActivityStatusId = 25,
                            ActivityDesc = "Rim Repairs"
                        },
                        new
                        {
                            ActivityStatusId = 26,
                            ActivityDesc = "Warranty-Other"
                        },
                        new
                        {
                            ActivityStatusId = 27,
                            ActivityDesc = "Final Assembly"
                        },
                        new
                        {
                            ActivityStatusId = 28,
                            ActivityDesc = "Awaiting Orders"
                        },
                        new
                        {
                            ActivityStatusId = 29,
                            ActivityDesc = "Final Sign-off"
                        },
                        new
                        {
                            ActivityStatusId = 30,
                            ActivityDesc = "Costed"
                        },
                        new
                        {
                            ActivityStatusId = 31,
                            ActivityDesc = "Send To Assessor"
                        },
                        new
                        {
                            ActivityStatusId = 32,
                            ActivityDesc = "Queries"
                        },
                        new
                        {
                            ActivityStatusId = 33,
                            ActivityDesc = "Warranty-Awaiting Parts"
                        },
                        new
                        {
                            ActivityStatusId = 34,
                            ActivityDesc = "Warranty-Awaiting Client"
                        },
                        new
                        {
                            ActivityStatusId = 35,
                            ActivityDesc = "OK"
                        },
                        new
                        {
                            ActivityStatusId = 36,
                            ActivityDesc = "Pre-Ordered"
                        },
                        new
                        {
                            ActivityStatusId = 37,
                            ActivityDesc = "To Be Done"
                        },
                        new
                        {
                            ActivityStatusId = 38,
                            ActivityDesc = "Ordered"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.AuadtexCredentials", b =>
                {
                    b.Property<int>("AuadtexCredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AudatexCompanyCode")
                        .HasColumnType("longtext");

                    b.Property<string>("AudatexPassword")
                        .HasColumnType("longtext");

                    b.Property<string>("AudatexUserName")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("AuadtexCredentialId");

                    b.ToTable("AuadtexCredentials");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext");

                    b.HasKey("ColorId");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            ColorName = "Red"
                        },
                        new
                        {
                            ColorId = 2,
                            ColorName = "Blue"
                        },
                        new
                        {
                            ColorId = 3,
                            ColorName = "Green"
                        },
                        new
                        {
                            ColorId = 4,
                            ColorName = "Silver"
                        },
                        new
                        {
                            ColorId = 5,
                            ColorName = "Grey"
                        },
                        new
                        {
                            ColorId = 6,
                            ColorName = "White"
                        },
                        new
                        {
                            ColorId = 7,
                            ColorName = "Brown"
                        },
                        new
                        {
                            ColorId = 8,
                            ColorName = "Pearl White"
                        },
                        new
                        {
                            ColorId = 9,
                            ColorName = "Purple"
                        },
                        new
                        {
                            ColorId = 10,
                            ColorName = "Beige"
                        },
                        new
                        {
                            ColorId = 11,
                            ColorName = "Maroon"
                        },
                        new
                        {
                            ColorId = 12,
                            ColorName = "Yellow"
                        },
                        new
                        {
                            ColorId = 13,
                            ColorName = "Black"
                        },
                        new
                        {
                            ColorId = 14,
                            ColorName = "Gold"
                        },
                        new
                        {
                            ColorId = 15,
                            ColorName = "Metallic Silver"
                        },
                        new
                        {
                            ColorId = 16,
                            ColorName = "Other"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.DepartmentCategories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CategoryId");

                    b.ToTable("DepartmentCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryDescription = "PRE WIP",
                            IsHidden = false
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryDescription = "WIP",
                            IsHidden = false
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryDescription = "POST WIP",
                            IsHidden = false
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryDescription = "ADDITIONALS",
                            IsHidden = true
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryDescription = "PARTS",
                            IsHidden = true
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryDescription = "WARRANTY",
                            IsHidden = true
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryDescription = "CANCELLED",
                            IsHidden = true
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.DepartmentReference", b =>
                {
                    b.Property<int>("DepartmentReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityStatusId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentTypeId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentReferenceId");

                    b.ToTable("DepartmentReference");

                    b.HasData(
                        new
                        {
                            DepartmentReferenceId = 1,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 1
                        },
                        new
                        {
                            DepartmentReferenceId = 2,
                            ActivityStatusId = 1,
                            DepartmentTypeId = 2
                        },
                        new
                        {
                            DepartmentReferenceId = 3,
                            ActivityStatusId = 2,
                            DepartmentTypeId = 2
                        },
                        new
                        {
                            DepartmentReferenceId = 4,
                            ActivityStatusId = 3,
                            DepartmentTypeId = 2
                        },
                        new
                        {
                            DepartmentReferenceId = 5,
                            ActivityStatusId = 4,
                            DepartmentTypeId = 2
                        },
                        new
                        {
                            DepartmentReferenceId = 6,
                            ActivityStatusId = 5,
                            DepartmentTypeId = 3
                        },
                        new
                        {
                            DepartmentReferenceId = 7,
                            ActivityStatusId = 6,
                            DepartmentTypeId = 3
                        },
                        new
                        {
                            DepartmentReferenceId = 8,
                            ActivityStatusId = 7,
                            DepartmentTypeId = 4
                        },
                        new
                        {
                            DepartmentReferenceId = 9,
                            ActivityStatusId = 8,
                            DepartmentTypeId = 4
                        },
                        new
                        {
                            DepartmentReferenceId = 10,
                            ActivityStatusId = 7,
                            DepartmentTypeId = 5
                        },
                        new
                        {
                            DepartmentReferenceId = 11,
                            ActivityStatusId = 11,
                            DepartmentTypeId = 5
                        },
                        new
                        {
                            DepartmentReferenceId = 12,
                            ActivityStatusId = 10,
                            DepartmentTypeId = 6
                        },
                        new
                        {
                            DepartmentReferenceId = 13,
                            ActivityStatusId = 36,
                            DepartmentTypeId = 6
                        },
                        new
                        {
                            DepartmentReferenceId = 14,
                            ActivityStatusId = 9,
                            DepartmentTypeId = 7
                        },
                        new
                        {
                            DepartmentReferenceId = 15,
                            ActivityStatusId = 12,
                            DepartmentTypeId = 7
                        },
                        new
                        {
                            DepartmentReferenceId = 16,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 8
                        },
                        new
                        {
                            DepartmentReferenceId = 17,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 9
                        },
                        new
                        {
                            DepartmentReferenceId = 18,
                            ActivityStatusId = 36,
                            DepartmentTypeId = 10
                        },
                        new
                        {
                            DepartmentReferenceId = 19,
                            ActivityStatusId = 16,
                            DepartmentTypeId = 10
                        },
                        new
                        {
                            DepartmentReferenceId = 20,
                            ActivityStatusId = 38,
                            DepartmentTypeId = 10
                        },
                        new
                        {
                            DepartmentReferenceId = 21,
                            ActivityStatusId = 17,
                            DepartmentTypeId = 10
                        },
                        new
                        {
                            DepartmentReferenceId = 22,
                            ActivityStatusId = 18,
                            DepartmentTypeId = 10
                        },
                        new
                        {
                            DepartmentReferenceId = 23,
                            ActivityStatusId = 19,
                            DepartmentTypeId = 10
                        },
                        new
                        {
                            DepartmentReferenceId = 24,
                            ActivityStatusId = 20,
                            DepartmentTypeId = 11
                        },
                        new
                        {
                            DepartmentReferenceId = 25,
                            ActivityStatusId = 21,
                            DepartmentTypeId = 11
                        },
                        new
                        {
                            DepartmentReferenceId = 26,
                            ActivityStatusId = 3,
                            DepartmentTypeId = 11
                        },
                        new
                        {
                            DepartmentReferenceId = 27,
                            ActivityStatusId = 4,
                            DepartmentTypeId = 11
                        },
                        new
                        {
                            DepartmentReferenceId = 28,
                            ActivityStatusId = 22,
                            DepartmentTypeId = 12
                        },
                        new
                        {
                            DepartmentReferenceId = 29,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 13
                        },
                        new
                        {
                            DepartmentReferenceId = 30,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 14
                        },
                        new
                        {
                            DepartmentReferenceId = 31,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 15
                        },
                        new
                        {
                            DepartmentReferenceId = 32,
                            ActivityStatusId = 22,
                            DepartmentTypeId = 16
                        },
                        new
                        {
                            DepartmentReferenceId = 33,
                            ActivityStatusId = 22,
                            DepartmentTypeId = 17
                        },
                        new
                        {
                            DepartmentReferenceId = 34,
                            ActivityStatusId = 22,
                            DepartmentTypeId = 18
                        },
                        new
                        {
                            DepartmentReferenceId = 35,
                            ActivityStatusId = 23,
                            DepartmentTypeId = 18
                        },
                        new
                        {
                            DepartmentReferenceId = 36,
                            ActivityStatusId = 27,
                            DepartmentTypeId = 18
                        },
                        new
                        {
                            DepartmentReferenceId = 37,
                            ActivityStatusId = 22,
                            DepartmentTypeId = 19
                        },
                        new
                        {
                            DepartmentReferenceId = 38,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 20
                        },
                        new
                        {
                            DepartmentReferenceId = 39,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 21
                        },
                        new
                        {
                            DepartmentReferenceId = 40,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 22
                        },
                        new
                        {
                            DepartmentReferenceId = 41,
                            ActivityStatusId = 24,
                            DepartmentTypeId = 23
                        },
                        new
                        {
                            DepartmentReferenceId = 42,
                            ActivityStatusId = 25,
                            DepartmentTypeId = 23
                        },
                        new
                        {
                            DepartmentReferenceId = 43,
                            ActivityStatusId = 26,
                            DepartmentTypeId = 23
                        },
                        new
                        {
                            DepartmentReferenceId = 44,
                            ActivityStatusId = 24,
                            DepartmentTypeId = 24
                        },
                        new
                        {
                            DepartmentReferenceId = 45,
                            ActivityStatusId = 25,
                            DepartmentTypeId = 25
                        },
                        new
                        {
                            DepartmentReferenceId = 46,
                            ActivityStatusId = 22,
                            DepartmentTypeId = 26
                        },
                        new
                        {
                            DepartmentReferenceId = 47,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 27
                        },
                        new
                        {
                            DepartmentReferenceId = 48,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 28
                        },
                        new
                        {
                            DepartmentReferenceId = 49,
                            ActivityStatusId = 37,
                            DepartmentTypeId = 29
                        },
                        new
                        {
                            DepartmentReferenceId = 50,
                            ActivityStatusId = 35,
                            DepartmentTypeId = 29
                        },
                        new
                        {
                            DepartmentReferenceId = 51,
                            ActivityStatusId = 33,
                            DepartmentTypeId = 29
                        },
                        new
                        {
                            DepartmentReferenceId = 52,
                            ActivityStatusId = 34,
                            DepartmentTypeId = 29
                        },
                        new
                        {
                            DepartmentReferenceId = 53,
                            ActivityStatusId = 26,
                            DepartmentTypeId = 29
                        },
                        new
                        {
                            DepartmentReferenceId = 54,
                            ActivityStatusId = 37,
                            DepartmentTypeId = 30
                        },
                        new
                        {
                            DepartmentReferenceId = 55,
                            ActivityStatusId = 32,
                            DepartmentTypeId = 30
                        },
                        new
                        {
                            DepartmentReferenceId = 56,
                            ActivityStatusId = 29,
                            DepartmentTypeId = 30
                        },
                        new
                        {
                            DepartmentReferenceId = 57,
                            ActivityStatusId = 30,
                            DepartmentTypeId = 30
                        },
                        new
                        {
                            DepartmentReferenceId = 58,
                            ActivityStatusId = 31,
                            DepartmentTypeId = 30
                        },
                        new
                        {
                            DepartmentReferenceId = 59,
                            ActivityStatusId = 39,
                            DepartmentTypeId = 30
                        },
                        new
                        {
                            DepartmentReferenceId = 60,
                            ActivityStatusId = 28,
                            DepartmentTypeId = 30
                        },
                        new
                        {
                            DepartmentReferenceId = 61,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 31
                        },
                        new
                        {
                            DepartmentReferenceId = 62,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 32
                        },
                        new
                        {
                            DepartmentReferenceId = 63,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 33
                        },
                        new
                        {
                            DepartmentReferenceId = 64,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 34
                        },
                        new
                        {
                            DepartmentReferenceId = 65,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 35
                        },
                        new
                        {
                            DepartmentReferenceId = 66,
                            ActivityStatusId = -1,
                            DepartmentTypeId = 16
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.DepartmentType", b =>
                {
                    b.Property<int>("DepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PercentageToCompletion")
                        .HasColumnType("int");

                    b.Property<int>("SequenceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("DepartmentTypeId");

                    b.ToTable("DepartmentType");

                    b.HasData(
                        new
                        {
                            DepartmentTypeId = 1,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 10,
                            SequenceId = 2,
                            Type = "Quoted"
                        },
                        new
                        {
                            DepartmentTypeId = 2,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 5,
                            SequenceId = 1,
                            Type = "Assessed"
                        },
                        new
                        {
                            DepartmentTypeId = 3,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 12,
                            SequenceId = 3,
                            Type = "Booking"
                        },
                        new
                        {
                            DepartmentTypeId = 4,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 20,
                            SequenceId = 4,
                            Type = "Job Cards"
                        },
                        new
                        {
                            DepartmentTypeId = 5,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 22,
                            SequenceId = 5,
                            Type = "Deposits"
                        },
                        new
                        {
                            DepartmentTypeId = 6,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 15,
                            SequenceId = 6,
                            Type = "Onsite"
                        },
                        new
                        {
                            DepartmentTypeId = 7,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 95,
                            SequenceId = 7,
                            Type = "Write Offs"
                        },
                        new
                        {
                            DepartmentTypeId = 8,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 20,
                            SequenceId = 8,
                            Type = "Workshop Loading"
                        },
                        new
                        {
                            DepartmentTypeId = 9,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 25,
                            SequenceId = 9,
                            Type = "Stripping"
                        },
                        new
                        {
                            DepartmentTypeId = 10,
                            CategoryId = 5,
                            IsDelete = false,
                            PercentageToCompletion = 30,
                            SequenceId = 10,
                            Type = "Parts"
                        },
                        new
                        {
                            DepartmentTypeId = 11,
                            CategoryId = 4,
                            IsDelete = false,
                            PercentageToCompletion = 32,
                            SequenceId = 11,
                            Type = "Additionals"
                        },
                        new
                        {
                            DepartmentTypeId = 12,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 35,
                            SequenceId = 12,
                            Type = "Panel Beating"
                        },
                        new
                        {
                            DepartmentTypeId = 13,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 35,
                            SequenceId = 13,
                            Type = "Body Filler"
                        },
                        new
                        {
                            DepartmentTypeId = 14,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 35,
                            SequenceId = 14,
                            Type = "Plastic Repair"
                        },
                        new
                        {
                            DepartmentTypeId = 15,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 38,
                            SequenceId = 15,
                            Type = "Paint Prep"
                        },
                        new
                        {
                            DepartmentTypeId = 16,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 40,
                            SequenceId = 16,
                            Type = "Painting"
                        },
                        new
                        {
                            DepartmentTypeId = 17,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 56,
                            SequenceId = 17,
                            Type = "Polish"
                        },
                        new
                        {
                            DepartmentTypeId = 18,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 58,
                            SequenceId = 18,
                            Type = "Assembly"
                        },
                        new
                        {
                            DepartmentTypeId = 19,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 42,
                            SequenceId = 19,
                            Type = "Mechanical"
                        },
                        new
                        {
                            DepartmentTypeId = 20,
                            CategoryId = 2,
                            IsDelete = true,
                            SequenceId = 20,
                            Type = "Workshop Loading"
                        },
                        new
                        {
                            DepartmentTypeId = 21,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 43,
                            SequenceId = 21,
                            Type = "Wheel Alignment"
                        },
                        new
                        {
                            DepartmentTypeId = 22,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 41,
                            SequenceId = 22,
                            Type = "Diagnostics"
                        },
                        new
                        {
                            DepartmentTypeId = 23,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 46,
                            SequenceId = 24,
                            Type = "Outwork"
                        },
                        new
                        {
                            DepartmentTypeId = 24,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 60,
                            SequenceId = 24,
                            Type = "Wash Bay"
                        },
                        new
                        {
                            DepartmentTypeId = 25,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 61,
                            SequenceId = 25,
                            Type = "Detailing"
                        },
                        new
                        {
                            DepartmentTypeId = 26,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 75,
                            SequenceId = 26,
                            Type = "Quality Control"
                        },
                        new
                        {
                            DepartmentTypeId = 27,
                            CategoryId = 2,
                            IsDelete = false,
                            PercentageToCompletion = 80,
                            SequenceId = 27,
                            Type = "Ready For Collection"
                        },
                        new
                        {
                            DepartmentTypeId = 28,
                            CategoryId = 3,
                            IsDelete = false,
                            PercentageToCompletion = 85,
                            SequenceId = 28,
                            Type = "Collected"
                        },
                        new
                        {
                            DepartmentTypeId = 29,
                            CategoryId = 3,
                            IsDelete = false,
                            PercentageToCompletion = 90,
                            SequenceId = 29,
                            Type = "CSI"
                        },
                        new
                        {
                            DepartmentTypeId = 30,
                            CategoryId = 3,
                            IsDelete = false,
                            PercentageToCompletion = 91,
                            SequenceId = 30,
                            Type = "Costing"
                        },
                        new
                        {
                            DepartmentTypeId = 31,
                            CategoryId = 3,
                            IsDelete = false,
                            PercentageToCompletion = 95,
                            SequenceId = 31,
                            Type = "Invoiced"
                        },
                        new
                        {
                            DepartmentTypeId = 32,
                            CategoryId = 3,
                            IsDelete = false,
                            PercentageToCompletion = 100,
                            SequenceId = 32,
                            Type = "Payment Received"
                        },
                        new
                        {
                            DepartmentTypeId = 33,
                            CategoryId = 7,
                            IsDelete = false,
                            PercentageToCompletion = 0,
                            SequenceId = 33,
                            Type = "Cancelled"
                        },
                        new
                        {
                            DepartmentTypeId = 34,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 18,
                            SequenceId = 34,
                            Type = "Job Converted"
                        },
                        new
                        {
                            DepartmentTypeId = 35,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 1,
                            SequenceId = 35,
                            Type = "Created"
                        },
                        new
                        {
                            DepartmentTypeId = 36,
                            CategoryId = 1,
                            IsDelete = true,
                            PercentageToCompletion = 32,
                            SequenceId = 36,
                            Type = "Back Order"
                        },
                        new
                        {
                            DepartmentTypeId = 37,
                            CategoryId = 1,
                            IsDelete = false,
                            PercentageToCompletion = 90,
                            SequenceId = 37,
                            Type = "CSI TO DO"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.DocumentTypes", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DocumentCode")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentType")
                        .HasColumnType("longtext");

                    b.HasKey("DocumentId");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            DocumentId = 1,
                            DocumentCode = "",
                            DocumentType = "Authorisation"
                        },
                        new
                        {
                            DocumentId = 2,
                            DocumentCode = "",
                            DocumentType = "Authorized Quotation"
                        },
                        new
                        {
                            DocumentId = 3,
                            DocumentCode = "",
                            DocumentType = "Parts invoice"
                        },
                        new
                        {
                            DocumentId = 4,
                            DocumentCode = "",
                            DocumentType = "Clearance certificate"
                        },
                        new
                        {
                            DocumentId = 5,
                            DocumentCode = "",
                            DocumentType = "Final costing"
                        },
                        new
                        {
                            DocumentId = 6,
                            DocumentCode = "",
                            DocumentType = "Credit note"
                        },
                        new
                        {
                            DocumentId = 7,
                            DocumentCode = "",
                            DocumentType = "Back order letter"
                        },
                        new
                        {
                            DocumentId = 8,
                            DocumentCode = "",
                            DocumentType = "Quotation"
                        },
                        new
                        {
                            DocumentId = 9,
                            DocumentCode = "",
                            DocumentType = "Parts Order Sheet"
                        },
                        new
                        {
                            DocumentId = 10,
                            DocumentCode = "",
                            DocumentType = "Other"
                        },
                        new
                        {
                            DocumentId = 11,
                            DocumentCode = "",
                            DocumentType = "Signed Clearance Certificate"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.JobStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("JobsJobId")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.HasIndex("JobsJobId");

                    b.ToTable("JobStatus");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Description = "Created"
                        },
                        new
                        {
                            StatusId = 2,
                            Description = "Assessed"
                        },
                        new
                        {
                            StatusId = 3,
                            Description = "Processed"
                        },
                        new
                        {
                            StatusId = 4,
                            Description = "Completed"
                        },
                        new
                        {
                            StatusId = 5,
                            Description = "Imported"
                        },
                        new
                        {
                            StatusId = 6,
                            Description = "Job Converted"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.Make", b =>
                {
                    b.Property<int>("MakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AutoMxVehicleNaming")
                        .HasColumnType("longtext");

                    b.Property<string>("BamsVehicleNaming")
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("MakeId");

                    b.ToTable("Make");

                    b.HasData(
                        new
                        {
                            MakeId = 1,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "AC"
                        },
                        new
                        {
                            MakeId = 2,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Abarth"
                        },
                        new
                        {
                            MakeId = 3,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Alfa Romeo"
                        },
                        new
                        {
                            MakeId = 4,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Aston Martin"
                        },
                        new
                        {
                            MakeId = 5,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "AUD",
                            Logo = "",
                            Name = "Audi"
                        },
                        new
                        {
                            MakeId = 6,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Austin.png",
                            Name = "Austin"
                        },
                        new
                        {
                            MakeId = 7,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/B.A.W.png",
                            Name = "B.A.W"
                        },
                        new
                        {
                            MakeId = 8,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/BAIC.png",
                            Name = "BAIC"
                        },
                        new
                        {
                            MakeId = 9,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/BMW.png",
                            Name = "BMW"
                        },
                        new
                        {
                            MakeId = 10,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Bentley.png",
                            Name = "Bentley"
                        },
                        new
                        {
                            MakeId = 11,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "C.A.M"
                        },
                        new
                        {
                            MakeId = 12,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "CMC"
                        },
                        new
                        {
                            MakeId = 13,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Cadillac"
                        },
                        new
                        {
                            MakeId = 14,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Chana.png",
                            Name = "Chana"
                        },
                        new
                        {
                            MakeId = 15,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Chery.png",
                            Name = "Chery"
                        },
                        new
                        {
                            MakeId = 16,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Chevrolet.png",
                            Name = "Chevrolet"
                        },
                        new
                        {
                            MakeId = 17,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Chrysler.png",
                            Name = "Chrysler"
                        },
                        new
                        {
                            MakeId = 18,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Citroen.png",
                            Name = "Citroen"
                        },
                        new
                        {
                            MakeId = 19,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Daewoo.png",
                            Name = "Daewoo"
                        },
                        new
                        {
                            MakeId = 20,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Daihatsu.png",
                            Name = "Daihatsu"
                        },
                        new
                        {
                            MakeId = 21,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Datsun.png",
                            Name = "Datsun"
                        },
                        new
                        {
                            MakeId = 22,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Dfsk"
                        },
                        new
                        {
                            MakeId = 23,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Dodge.png",
                            Name = "Dodge"
                        },
                        new
                        {
                            MakeId = 24,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "FAW"
                        },
                        new
                        {
                            MakeId = 25,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Ferrari.png",
                            Name = "Ferrari"
                        },
                        new
                        {
                            MakeId = 26,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Fiat.png",
                            Name = "Fiat"
                        },
                        new
                        {
                            MakeId = 27,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Ford.png",
                            Name = "Ford"
                        },
                        new
                        {
                            MakeId = 28,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Foton.png",
                            Name = "Foton"
                        },
                        new
                        {
                            MakeId = 29,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Fudi"
                        },
                        new
                        {
                            MakeId = 30,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/GWM.png",
                            Name = "GWM"
                        },
                        new
                        {
                            MakeId = 31,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Geely.png",
                            Name = "Geely"
                        },
                        new
                        {
                            MakeId = 32,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/GoldenJourney.png",
                            Name = "Golden Journey"
                        },
                        new
                        {
                            MakeId = 33,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Haval.png",
                            Name = "Haval"
                        },
                        new
                        {
                            MakeId = 34,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Hino.png",
                            Name = "Hino"
                        },
                        new
                        {
                            MakeId = 35,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Honda.png",
                            Name = "Honda"
                        },
                        new
                        {
                            MakeId = 36,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Hummer.png",
                            Name = "Hummer"
                        },
                        new
                        {
                            MakeId = 37,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "HYU",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Hyundai.png",
                            Name = "Hyundai"
                        },
                        new
                        {
                            MakeId = 38,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Infiniti.png",
                            Name = "Infiniti"
                        },
                        new
                        {
                            MakeId = 39,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Isuzu.png",
                            Name = "Isuzu"
                        },
                        new
                        {
                            MakeId = 40,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Iveco.png",
                            Name = "Iveco"
                        },
                        new
                        {
                            MakeId = 41,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/JAC.png",
                            Name = "JAC"
                        },
                        new
                        {
                            MakeId = 42,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/JMC.png",
                            Name = "JMC"
                        },
                        new
                        {
                            MakeId = 43,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Jaguar.png",
                            Name = "Jaguar"
                        },
                        new
                        {
                            MakeId = 44,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Jeep.png",
                            Name = "Jeep"
                        },
                        new
                        {
                            MakeId = 45,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Jinbei"
                        },
                        new
                        {
                            MakeId = 46,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "KIA",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Kia.png",
                            Name = "Kia"
                        },
                        new
                        {
                            MakeId = 47,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Lamborghini.png",
                            Name = "Lamborghini"
                        },
                        new
                        {
                            MakeId = 48,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/LandRover.png",
                            Name = "Land Rover"
                        },
                        new
                        {
                            MakeId = 49,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "LEX",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Lexus.png",
                            Name = "Lexus"
                        },
                        new
                        {
                            MakeId = 50,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Lotus.png",
                            Name = "Lotus"
                        },
                        new
                        {
                            MakeId = 51,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/MG.png",
                            Name = "MG"
                        },
                        new
                        {
                            MakeId = 52,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/MINI.png",
                            Name = "MINI"
                        },
                        new
                        {
                            MakeId = 53,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "MAH",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Mahindra.png",
                            Name = "Mahindra"
                        },
                        new
                        {
                            MakeId = 54,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Maserati.png",
                            Name = "Maserati"
                        },
                        new
                        {
                            MakeId = 55,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Mazda.png",
                            Name = "Mazda"
                        },
                        new
                        {
                            MakeId = 56,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/McLaren.png",
                            Name = "McLaren"
                        },
                        new
                        {
                            MakeId = 57,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "MER",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Mercedes-Benz.png",
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            MakeId = 58,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Mitsubishi.png",
                            Name = "Mitsubishi"
                        },
                        new
                        {
                            MakeId = 59,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "NIS",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Nissan.png",
                            Name = "Nissan"
                        },
                        new
                        {
                            MakeId = 60,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Noble"
                        },
                        new
                        {
                            MakeId = 61,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Opel.png",
                            Name = "Opel"
                        },
                        new
                        {
                            MakeId = 62,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "PEU",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Peugeot.png",
                            Name = "Peugeot"
                        },
                        new
                        {
                            MakeId = 63,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Porshe.png",
                            Name = "Porshe"
                        },
                        new
                        {
                            MakeId = 64,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Proton.png",
                            Name = "Proton"
                        },
                        new
                        {
                            MakeId = 65,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Renault.png",
                            Name = "Renault"
                        },
                        new
                        {
                            MakeId = 66,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Rolls-Royce.png",
                            Name = "Rolls-Royce"
                        },
                        new
                        {
                            MakeId = 67,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/SAIC.png",
                            Name = "SAIC"
                        },
                        new
                        {
                            MakeId = 68,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/SEAT.png",
                            Name = "SEAT"
                        },
                        new
                        {
                            MakeId = 69,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Saab.png",
                            Name = "Saab"
                        },
                        new
                        {
                            MakeId = 70,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Smart.png",
                            Name = "Smart"
                        },
                        new
                        {
                            MakeId = 71,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/SsangYong.png",
                            Name = "SsangYong"
                        },
                        new
                        {
                            MakeId = 72,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Suzuki.png",
                            Name = "Suzuki"
                        },
                        new
                        {
                            MakeId = 73,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/TATA.png",
                            Name = "TATA"
                        },
                        new
                        {
                            MakeId = 74,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "TOY",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Toyota.png",
                            Name = "Toyota"
                        },
                        new
                        {
                            MakeId = 75,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "VWA",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Volkswagen.png",
                            Name = "Volkswagen"
                        },
                        new
                        {
                            MakeId = 76,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "VOL",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Volvo.png",
                            Name = "Volvo"
                        },
                        new
                        {
                            MakeId = 77,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "https://NMOHUMlive.blob.core.windows.net/twsb-application-reference-files/VehicleLogos/Zotye.png",
                            Name = "Zotye"
                        },
                        new
                        {
                            MakeId = 78,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Cherry"
                        },
                        new
                        {
                            MakeId = 79,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Jaecoo"
                        },
                        new
                        {
                            MakeId = 80,
                            AutoMxVehicleNaming = "",
                            BamsVehicleNaming = "",
                            Logo = "",
                            Name = "Jetour"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.ModelType", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModelId");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<string>("ModelDesc")
                        .HasColumnType("longtext");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("ModelId");

                    b.HasIndex("MakeId");

                    b.ToTable("ModelType");

                    b.HasData(
                        new
                        {
                            ModelId = 1,
                            MakeId = 1,
                            ModelDesc = "COBRA",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 2,
                            MakeId = 1,
                            ModelDesc = "BACKDRAFT ROADSTER",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 3,
                            MakeId = 2,
                            ModelDesc = "124 SPIDER",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 4,
                            MakeId = 2,
                            ModelDesc = "500 595",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 5,
                            MakeId = 2,
                            ModelDesc = "500C 595",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 6,
                            MakeId = 3,
                            ModelDesc = "ALFA 33",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 7,
                            MakeId = 3,
                            ModelDesc = "GIULIETTA / 159",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 8,
                            MakeId = 3,
                            ModelDesc = "ALFETTA / SUPER 2000",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 9,
                            MakeId = 3,
                            ModelDesc = "GTV / ALFETTA 2000 GTV",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 10,
                            MakeId = 3,
                            ModelDesc = "145 / 146",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 11,
                            MakeId = 3,
                            ModelDesc = "147",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 12,
                            MakeId = 3,
                            ModelDesc = "MiTO",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 13,
                            MakeId = 3,
                            ModelDesc = "155",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 14,
                            MakeId = 3,
                            ModelDesc = "156 / GT",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 15,
                            MakeId = 3,
                            ModelDesc = "159",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 16,
                            MakeId = 3,
                            ModelDesc = "GIULIA",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 17,
                            MakeId = 3,
                            ModelDesc = "164",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 18,
                            MakeId = 3,
                            ModelDesc = "SPIDER / GTV",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 19,
                            MakeId = 3,
                            ModelDesc = "STELVIO",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 20,
                            MakeId = 4,
                            ModelDesc = "VANTAGE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 21,
                            MakeId = 4,
                            ModelDesc = "DB 7 / 9/ 11",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 22,
                            MakeId = 4,
                            ModelDesc = "VANQUISH",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 23,
                            MakeId = 4,
                            ModelDesc = "VIRAGE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 24,
                            MakeId = 4,
                            ModelDesc = "RAPIDE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 25,
                            MakeId = 4,
                            ModelDesc = "VOLANTE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 26,
                            MakeId = 5,
                            ModelDesc = "R8",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 27,
                            MakeId = 5,
                            ModelDesc = "100",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 28,
                            MakeId = 5,
                            ModelDesc = "200",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 29,
                            MakeId = 5,
                            ModelDesc = "A1",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 30,
                            MakeId = 5,
                            ModelDesc = "A3",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 31,
                            MakeId = 5,
                            ModelDesc = "A4",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 32,
                            MakeId = 5,
                            ModelDesc = "A5",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 33,
                            MakeId = 5,
                            ModelDesc = "A6",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 34,
                            MakeId = 5,
                            ModelDesc = "A7",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 35,
                            MakeId = 5,
                            ModelDesc = "A8",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 36,
                            MakeId = 5,
                            ModelDesc = "Q2",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 37,
                            MakeId = 5,
                            ModelDesc = "Q3",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 38,
                            MakeId = 5,
                            ModelDesc = "Q5",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 39,
                            MakeId = 5,
                            ModelDesc = "Q7",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 40,
                            MakeId = 5,
                            ModelDesc = "Q8",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 41,
                            MakeId = 5,
                            ModelDesc = "TT",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 42,
                            MakeId = 5,
                            ModelDesc = "TURBO/CABRIOLET/S2/S4/S6/S8/A8",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 43,
                            MakeId = 7,
                            ModelDesc = "INYATHI",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 44,
                            MakeId = 7,
                            ModelDesc = "SASUKA/TOURLUX",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 45,
                            MakeId = 8,
                            ModelDesc = "D20",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 46,
                            MakeId = 8,
                            ModelDesc = "X25",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 47,
                            MakeId = 9,
                            ModelDesc = "1 SERIES",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 48,
                            MakeId = 9,
                            ModelDesc = "2 SERIES CONVERTIBLE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 49,
                            MakeId = 9,
                            ModelDesc = "2 SERIES COUPE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 50,
                            MakeId = 9,
                            ModelDesc = "3 SERIES SEDAN",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 51,
                            MakeId = 9,
                            ModelDesc = "4 SERIES CONVERTIBLE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 52,
                            MakeId = 9,
                            ModelDesc = "4 SERIES COUPE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 53,
                            MakeId = 9,
                            ModelDesc = "4 SERIES GRAN COUPE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 54,
                            MakeId = 9,
                            ModelDesc = "5 SERIES SEDAN",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 55,
                            MakeId = 9,
                            ModelDesc = "7 SERIES SEDAN",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 56,
                            MakeId = 9,
                            ModelDesc = "8 SERIES CONVERTIBLE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 57,
                            MakeId = 9,
                            ModelDesc = "8 SERIES COUPE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 58,
                            MakeId = 9,
                            ModelDesc = "8 SERIES GRAN COUPE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 59,
                            MakeId = 9,
                            ModelDesc = "i3",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 60,
                            MakeId = 9,
                            ModelDesc = "i8 Coupe",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 61,
                            MakeId = 9,
                            ModelDesc = "i8 Roadster",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 62,
                            MakeId = 9,
                            ModelDesc = "M2 COUPE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 63,
                            MakeId = 9,
                            ModelDesc = "M3",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 64,
                            MakeId = 9,
                            ModelDesc = "M4 CONVERTIBLE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 65,
                            MakeId = 9,
                            ModelDesc = "M4 COUPE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 66,
                            MakeId = 9,
                            ModelDesc = "M5",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 67,
                            MakeId = 9,
                            ModelDesc = "M8 CONVERTIBLE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 68,
                            MakeId = 9,
                            ModelDesc = "M8 COUPE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 69,
                            MakeId = 9,
                            ModelDesc = "M8 GRAN COUPE",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 70,
                            MakeId = 9,
                            ModelDesc = "X1",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 71,
                            MakeId = 9,
                            ModelDesc = "X2",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 72,
                            MakeId = 9,
                            ModelDesc = "X3",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 73,
                            MakeId = 9,
                            ModelDesc = "X4",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 74,
                            MakeId = 9,
                            ModelDesc = "X5",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 75,
                            MakeId = 9,
                            ModelDesc = "X6",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 76,
                            MakeId = 9,
                            ModelDesc = "X7",
                            year = 2018
                        },
                        new
                        {
                            ModelId = 77,
                            MakeId = 9,
                            ModelDesc = "Z4",
                            year = 2018
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.PaidByType", b =>
                {
                    b.Property<int>("PaidByTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PaidByTypeDescription")
                        .HasColumnType("longtext");

                    b.HasKey("PaidByTypeId");

                    b.ToTable("PaidByType");

                    b.HasData(
                        new
                        {
                            PaidByTypeId = 1,
                            PaidByTypeDescription = "Customer"
                        },
                        new
                        {
                            PaidByTypeId = 2,
                            PaidByTypeDescription = "Insurance"
                        },
                        new
                        {
                            PaidByTypeId = 3,
                            PaidByTypeDescription = "Towing"
                        },
                        new
                        {
                            PaidByTypeId = 4,
                            PaidByTypeDescription = "Salvage"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.PaymentFor", b =>
                {
                    b.Property<int>("PaymentForId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PaymentForDescription")
                        .HasColumnType("longtext");

                    b.HasKey("PaymentForId");

                    b.ToTable("PaymentFor");

                    b.HasData(
                        new
                        {
                            PaymentForId = 1,
                            PaymentForDescription = "Invoice"
                        },
                        new
                        {
                            PaymentForId = 2,
                            PaymentForDescription = "Excess"
                        },
                        new
                        {
                            PaymentForId = 3,
                            PaymentForDescription = "Betterment"
                        },
                        new
                        {
                            PaymentForId = 4,
                            PaymentForDescription = "Towing"
                        },
                        new
                        {
                            PaymentForId = 5,
                            PaymentForDescription = "Settlement"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodDescription")
                        .HasColumnType("longtext");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            PaymentMethodDescription = "Cash"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            PaymentMethodDescription = "EFT"
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            PaymentMethodDescription = "Speed point"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PaymentTypeDescription")
                        .HasColumnType("longtext");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            PaymentTypeId = 1,
                            PaymentTypeDescription = "Payment"
                        },
                        new
                        {
                            PaymentTypeId = 2,
                            PaymentTypeDescription = "Credit"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.QuoteItemType", b =>
                {
                    b.Property<int>("QuoteItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("longtext");

                    b.HasKey("QuoteItemTypeId");

                    b.ToTable("QuoteItemType");

                    b.HasData(
                        new
                        {
                            QuoteItemTypeId = 1,
                            ItemDescription = "Paint"
                        },
                        new
                        {
                            QuoteItemTypeId = 2,
                            ItemDescription = "Repair"
                        },
                        new
                        {
                            QuoteItemTypeId = 3,
                            ItemDescription = "New"
                        },
                        new
                        {
                            QuoteItemTypeId = 4,
                            ItemDescription = "S&A"
                        },
                        new
                        {
                            QuoteItemTypeId = 5,
                            ItemDescription = "Frame"
                        },
                        new
                        {
                            QuoteItemTypeId = 6,
                            ItemDescription = "Other"
                        },
                        new
                        {
                            QuoteItemTypeId = 7,
                            ItemDescription = "Check"
                        },
                        new
                        {
                            QuoteItemTypeId = 8,
                            ItemDescription = "Blend"
                        },
                        new
                        {
                            QuoteItemTypeId = 9,
                            ItemDescription = "Polish"
                        },
                        new
                        {
                            QuoteItemTypeId = 10,
                            ItemDescription = "R&R"
                        },
                        new
                        {
                            QuoteItemTypeId = 11,
                            ItemDescription = "Alt"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.RepairMethod", b =>
                {
                    b.Property<int>("RepairMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RepairMethodDescription")
                        .HasColumnType("longtext");

                    b.HasKey("RepairMethodId");

                    b.ToTable("RepairMethod");

                    b.HasData(
                        new
                        {
                            RepairMethodId = 1,
                            RepairMethodDescription = "Repair_N"
                        },
                        new
                        {
                            RepairMethodId = 2,
                            RepairMethodDescription = "Renew"
                        },
                        new
                        {
                            RepairMethodId = 3,
                            RepairMethodDescription = "Replace"
                        },
                        new
                        {
                            RepairMethodId = 4,
                            RepairMethodDescription = "Repair Paint LI"
                        },
                        new
                        {
                            RepairMethodId = 5,
                            RepairMethodDescription = "New Part Paint LE"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.RepairType", b =>
                {
                    b.Property<int>("RepairTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RepairTypeId");

                    b.Property<string>("TypeDescription")
                        .HasColumnType("longtext");

                    b.HasKey("RepairTypeId");

                    b.ToTable("RepairTypes");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReturnForCreditReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("return_for_credits_reasons");
                });

            modelBuilder.Entity("NMOHUM.API.Models.StockItemType", b =>
                {
                    b.Property<int>("StockItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("StockItemTypeId");

                    b.ToTable("StockItemType");
                });

            modelBuilder.Entity("NMOHUM.API.Models.StockModels.Stock", b =>
                {
                    b.Property<int>("StockItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("longtext");

                    b.Property<int>("CapturedBy")
                        .HasColumnType("int");

                    b.Property<int>("CategoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentlyStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStockAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastInteractionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaximumDesiredQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MinimumDesiredQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("double");

                    b.Property<double>("QuantityOnHand")
                        .HasColumnType("double");

                    b.Property<string>("SKUNumber")
                        .HasColumnType("longtext");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("double");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("StockItemId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("NMOHUM.API.Models.StockModels.StockOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<double>("NettTotal")
                        .HasColumnType("double");

                    b.Property<string>("RepairOrderNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.ToTable("StockOrder");
                });

            modelBuilder.Entity("NMOHUM.API.Models.StockModels.StockPurchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DatePurchased")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.ToTable("StockPurchase");
                });

            modelBuilder.Entity("NMOHUM.API.Models.StockModels.StockTransaction", b =>
                {
                    b.Property<int>("StockTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("NettTotal")
                        .HasColumnType("double");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("StockTransactionId");

                    b.ToTable("StockTransaction");
                });

            modelBuilder.Entity("NMOHUM.API.Models.SuppliedParts", b =>
                {
                    b.Property<int>("SupplierPartsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AudaGuidNo")
                        .HasColumnType("longtext");

                    b.Property<int?>("Availability")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeAccept")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmployeeAcceptedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EmployeeAllocatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EmployeeOrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EmployeeOrdered")
                        .HasColumnType("int");

                    b.Property<double>("FinalNett")
                        .HasColumnType("double");

                    b.Property<DateTime>("InsuranceAllocatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<double>("MarkUp")
                        .HasColumnType("double");

                    b.Property<double>("Nett")
                        .HasColumnType("double");

                    b.Property<DateTime>("NettReceivedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("PartsStatus")
                        .HasColumnType("longtext");

                    b.Property<int?>("PartsSupplierCompanyBranchId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("longtext");

                    b.Property<int>("QuoteItemId")
                        .HasColumnType("int");

                    b.Property<double>("Quoted")
                        .HasColumnType("double");

                    b.Property<int?>("RFCProcessed")
                        .HasColumnType("int");

                    b.Property<string>("RFCProcessedNo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RFCProcessedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RFCProcessedReason")
                        .HasColumnType("longtext");

                    b.Property<string>("RFCRequestDocNo")
                        .HasColumnType("longtext");

                    b.Property<string>("RFCRequestReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RFCRequestedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("SettlementDiscount")
                        .HasColumnType("double");

                    b.Property<int?>("SubBackOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Supbodate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("SuppliedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("isFinalized")
                        .HasColumnType("int");

                    b.Property<int?>("isPartInsurancePaid")
                        .HasColumnType("int");

                    b.Property<int?>("isRFCRequest")
                        .HasColumnType("int");

                    b.HasKey("SupplierPartsId");

                    b.HasIndex("PartId");

                    b.HasIndex("PartsSupplierCompanyBranchId");

                    b.HasIndex("QuoteItemId")
                        .IsUnique();

                    b.ToTable("SuppliedParts");
                });

            modelBuilder.Entity("NMOHUM.API.Models.SurveyDetail", b =>
                {
                    b.Property<int>("SurveyDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyDetailId");

                    b.Property<int?>("SurveyMasterId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkshopSurveyAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkshopSurveyQuestionId")
                        .HasColumnType("int");

                    b.HasKey("SurveyDetailId");

                    b.ToTable("SurveyDetail");
                });

            modelBuilder.Entity("NMOHUM.API.Models.SurveyMaster", b =>
                {
                    b.Property<int>("SurveyMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyMasterId");

                    b.Property<int>("ContactClientId")
                        .HasColumnType("int");

                    b.Property<int?>("InsurerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSurveyCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSurveySent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SurveryCompletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("SurverySentViaEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("SurverySentViaSms")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("SurverySentViaWhatsApp")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SurverySubmittedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SurveyCreatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SurveyMasterId");

                    b.ToTable("SurveyMaster");
                });

            modelBuilder.Entity("NMOHUM.API.Models.TaskReferenceDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("task_reference_descriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaskDescription = "Workshop Loading"
                        },
                        new
                        {
                            Id = 2,
                            TaskDescription = "Stripping"
                        },
                        new
                        {
                            Id = 3,
                            TaskDescription = "Panel Beating"
                        },
                        new
                        {
                            Id = 4,
                            TaskDescription = "Body Filler"
                        },
                        new
                        {
                            Id = 5,
                            TaskDescription = "Plastic Repair"
                        },
                        new
                        {
                            Id = 6,
                            TaskDescription = "Paint Prep"
                        },
                        new
                        {
                            Id = 7,
                            TaskDescription = "Painting"
                        },
                        new
                        {
                            Id = 8,
                            TaskDescription = "Assembled"
                        },
                        new
                        {
                            Id = 9,
                            TaskDescription = "Polish"
                        },
                        new
                        {
                            Id = 10,
                            TaskDescription = "Mechanical"
                        },
                        new
                        {
                            Id = 11,
                            TaskDescription = "Wheel Alignment"
                        },
                        new
                        {
                            Id = 12,
                            TaskDescription = "Diagnostics"
                        },
                        new
                        {
                            Id = 13,
                            TaskDescription = "Outwork"
                        },
                        new
                        {
                            Id = 14,
                            TaskDescription = "Wash Bay"
                        },
                        new
                        {
                            Id = 15,
                            TaskDescription = "Detailing"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.TatSchedule", b =>
                {
                    b.Property<int>("TatScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityCompleted")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("TatScheduleId");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("JobId");

                    b.ToTable("TatSchedule");
                });

            modelBuilder.Entity("NMOHUM.API.Models.TowingDetails", b =>
                {
                    b.Property<int>("TowingDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("AdminFee")
                        .HasColumnType("double");

                    b.Property<int>("BillToCustomer")
                        .HasColumnType("int");

                    b.Property<double?>("CallOutFee")
                        .HasColumnType("double");

                    b.Property<int>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<double>("DistanceTowedInKm")
                        .HasColumnType("double");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberStorageDays")
                        .HasColumnType("int");

                    b.Property<double?>("RecoveryFee")
                        .HasColumnType("double");

                    b.Property<double?>("ReleaseFee")
                        .HasColumnType("double");

                    b.Property<double?>("StorageDaysPrice")
                        .HasColumnType("double");

                    b.Property<double?>("TollFees")
                        .HasColumnType("double");

                    b.Property<double?>("TowCosts")
                        .HasColumnType("double");

                    b.Property<DateTime?>("TowDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TowFrom")
                        .HasColumnType("longtext");

                    b.Property<string>("TowInvoiceNo")
                        .HasColumnType("longtext");

                    b.Property<string>("TowReferenceNo")
                        .HasColumnType("longtext");

                    b.Property<double?>("TravelFee")
                        .HasColumnType("double");

                    b.Property<double>("VatAmount")
                        .HasColumnType("double");

                    b.Property<int>("VehicleOnSite")
                        .HasColumnType("int");

                    b.HasKey("TowingDetailsId");

                    b.HasIndex("JobId");

                    b.ToTable("TowingDetails", (string)null);
                });

            modelBuilder.Entity("NMOHUM.API.Models.UnitOfMeasure", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasColumnType("longtext");

                    b.HasKey("UnitId");

                    b.ToTable("UnitOfMeasure");
                });

            modelBuilder.Entity("NMOHUM.API.Models.UploadDocument", b =>
                {
                    b.Property<int>("UploadDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UploadDocumentId");

                    b.Property<string>("AudatexImageId")
                        .HasColumnType("longtext");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DownloadPlatform")
                        .HasColumnType("longtext");

                    b.Property<string>("FileDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("FileType")
                        .HasColumnType("longtext");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("UploadDocumentId");

                    b.ToTable("UploadDocument");
                });

            modelBuilder.Entity("NMOHUM.API.Models.UserTokens", b =>
                {
                    b.Property<long>("UserTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TokenGeneratedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isUsed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("NMOHUM.API.Models.VehicleBodyTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BodyType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("VehicleBodyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyType = "Bus"
                        },
                        new
                        {
                            Id = 2,
                            BodyType = "Cabriolet"
                        },
                        new
                        {
                            Id = 3,
                            BodyType = "Coupe"
                        },
                        new
                        {
                            Id = 4,
                            BodyType = "Crossover"
                        },
                        new
                        {
                            Id = 5,
                            BodyType = "Double Cab"
                        },
                        new
                        {
                            Id = 6,
                            BodyType = "Drop Side"
                        },
                        new
                        {
                            Id = 7,
                            BodyType = "Extended Cab"
                        },
                        new
                        {
                            Id = 8,
                            BodyType = "Hatch Back"
                        },
                        new
                        {
                            Id = 9,
                            BodyType = "MPV"
                        },
                        new
                        {
                            Id = 10,
                            BodyType = "Panel Van"
                        },
                        new
                        {
                            Id = 11,
                            BodyType = "SUV"
                        },
                        new
                        {
                            Id = 12,
                            BodyType = "Sedan"
                        },
                        new
                        {
                            Id = 13,
                            BodyType = "Single Cab"
                        },
                        new
                        {
                            Id = 14,
                            BodyType = "Station Wagon"
                        },
                        new
                        {
                            Id = 15,
                            BodyType = "Truck"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.VehiclePartQuoteItems", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAllocatedToSupplier")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsPartAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPartAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPartInvoiced")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPartOnBackOrder")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPartOrdered")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPartPaidByInsurer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPartReturnedForCredit")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MarkupPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MarkupValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MasterQuoteItemId")
                        .HasColumnType("int");

                    b.Property<int?>("PartAcceptedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PartAcceptedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PartAllocatedBy")
                        .HasColumnType("int");

                    b.Property<string>("PartBackOrderDate")
                        .HasColumnType("longtext");

                    b.Property<string>("PartCreditNoteBlobReference")
                        .HasColumnType("longtext");

                    b.Property<string>("PartCreditNoteNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PartExpectedDeliveryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PartInvoiceBlobReference")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("PartInvoiceNetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PartInvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PartInvoicedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PartNotes")
                        .HasColumnType("longtext");

                    b.Property<string>("PartNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("PartOrderedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PartOrderedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PartReturnedForCreditActionedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("PartReturnedForCreditApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PartReturnedReason")
                        .HasColumnType("longtext");

                    b.Property<string>("PartStatus")
                        .HasColumnType("longtext");

                    b.Property<int?>("PartSupplierCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("PartTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PartsCreditedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnForCreditReasonId")
                        .HasColumnType("int");

                    b.Property<decimal>("SupplierQuotedNettPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalInvoiceNetPriceInclVatBeforeMarkup")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPartInvoiceAmountInclMarkup")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPartInvoiceAmountInclVAT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatOnPartInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VatValueOnInvoiceNetPriceBeforeMarkup")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PartId");

                    b.ToTable("vehicle_parts_quoteitems");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WhatsApp.WhatsAppConversations", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("ConversationCreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("ConversationType")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<string>("From")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastMessagePreview")
                        .HasColumnType("longtext");

                    b.Property<string>("To")
                        .HasColumnType("longtext");

                    b.Property<string>("TwilioConversationSid")
                        .HasColumnType("longtext");

                    b.Property<int?>("UnreadCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConversationId");

                    b.ToTable("whatsapp_conversations");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WhatsApp.WhatsAppTemplateVariables", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("longtext");

                    b.Property<string>("Label")
                        .HasColumnType("longtext");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("whatsapp_template_variables");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WhatsApp.WhatsAppTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MessageTemplateBody")
                        .HasColumnType("longtext");

                    b.Property<string>("MessageType")
                        .HasColumnType("longtext");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("WhatsAppTemplateId")
                        .HasColumnType("longtext");

                    b.Property<string>("WhatsAppTemplateName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("whatsapp_templates");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkShopCourtesyCars", b =>
                {
                    b.Property<int>("CourtesyCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<int>("IsAvailable")
                        .HasColumnType("int");

                    b.Property<int?>("IsRemoved")
                        .HasColumnType("int");

                    b.Property<string>("Mileage")
                        .HasColumnType("longtext");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleMake")
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleModel")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("CourtesyCarId");

                    b.ToTable("WorkShopCourtesyCars");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopBankAccounts", b =>
                {
                    b.Property<int>("WorkshopAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("BankAccountType")
                        .HasColumnType("longtext");

                    b.Property<string>("BankBranchCode")
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.Property<int?>("isActive")
                        .HasColumnType("int");

                    b.HasKey("WorkshopAccountId");

                    b.ToTable("WorkshopBankAccounts");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopCSIField", b =>
                {
                    b.Property<int>("WorkshopCSIFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkshopCSIFieldId");

                    b.Property<string>("CSIField")
                        .HasColumnType("longtext");

                    b.Property<string>("CSIFieldType")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("WorkshopCSIFieldId");

                    b.ToTable("WorkshopCSIFields");

                    b.HasData(
                        new
                        {
                            WorkshopCSIFieldId = 1,
                            CSIField = "JobId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 2,
                            CSIField = "DamageReportNumber",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 3,
                            CSIField = "RepairOrderNumber",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 4,
                            CSIField = "WorkshopId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 5,
                            CSIField = "VehicleId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 6,
                            CSIField = "CustomerId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 7,
                            CSIField = "StatusId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 8,
                            CSIField = "LastStatusUpdate",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 9,
                            CSIField = "IsNotInsured",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 10,
                            CSIField = "IsRepeatJob",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 11,
                            CSIField = "IsTowed",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 12,
                            CSIField = "VehicleOnSite",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 13,
                            CSIField = "JobDate",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 14,
                            CSIField = "ScheduledCompletionDate",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 15,
                            CSIField = "ScheduledBookInDate",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 16,
                            CSIField = "ServiceAdvisorId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 17,
                            CSIField = "EstimatorId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 18,
                            CSIField = "JobComplete",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 19,
                            CSIField = "JobTypeId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 20,
                            CSIField = "Obid",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 21,
                            CSIField = "Originator",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 22,
                            CSIField = "AssessmentNumber",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 23,
                            CSIField = "UserId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 24,
                            CSIField = "LastEditedBy",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 25,
                            CSIField = "EditedById",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 26,
                            CSIField = "OldRepairOrderNumber",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 27,
                            CSIField = "OrderNumber",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 28,
                            CSIField = "CurrentActivityId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 29,
                            CSIField = "CurrentDepartmentId",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 30,
                            CSIField = "IsTotalLoss",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 31,
                            CSIField = "JobNotes",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 32,
                            CSIField = "IsDrivable",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 33,
                            CSIField = "AssessmentGuid",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 34,
                            CSIField = "JobConvertedDate",
                            CSIFieldType = "Jobs",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 35,
                            CSIField = "ClaimId",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 36,
                            CSIField = "CompanyBranchId",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 37,
                            CSIField = "ClaimNo",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 38,
                            CSIField = "PolicyNo",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 39,
                            CSIField = "DateOfIncident",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 40,
                            CSIField = "InspectionDate",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 41,
                            CSIField = "InsuredAmount",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 42,
                            CSIField = "JobId",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 43,
                            CSIField = "ClaimRepairValue",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 44,
                            CSIField = "BrokerId",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 45,
                            CSIField = "AccessorId",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 46,
                            CSIField = "ClaimRefName",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 47,
                            CSIField = "ExcessValue",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 48,
                            CSIField = "ExcessPercentValue",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 49,
                            CSIField = "Betterment",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 50,
                            CSIField = "ExcessValueTBA",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 51,
                            CSIField = "ExcessOptionOnePercentage",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 52,
                            CSIField = "ExcessOptionOneMinimum",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 53,
                            CSIField = "ExcessOptionTwoPercentage",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 54,
                            CSIField = "ExcessOptionTwoMinimum",
                            CSIFieldType = "Insurance Claim",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 55,
                            CSIField = "VehicleId",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 56,
                            CSIField = "EngineNo",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 57,
                            CSIField = "MakeId",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 58,
                            CSIField = "ModelId",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 59,
                            CSIField = "Odometer",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 60,
                            CSIField = "RegistrationDate",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 61,
                            CSIField = "VinNumber",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 62,
                            CSIField = "RegistrationNumber",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 63,
                            CSIField = "VinCofirmed",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 64,
                            CSIField = "ColorId",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 65,
                            CSIField = "TyreMakeId",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 66,
                            CSIField = "TyreSize",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 67,
                            CSIField = "BodyTypeId",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 68,
                            CSIField = "UnderWarranty",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 69,
                            CSIField = "VehicleYear",
                            CSIFieldType = "Client Vehicle",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 70,
                            CSIField = "CustomerId",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 71,
                            CSIField = "UniqueSecurityNumber",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 72,
                            CSIField = "FirstNames",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 73,
                            CSIField = "LastName",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 74,
                            CSIField = "WorkTelephone",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 75,
                            CSIField = "HomeTelephone",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 76,
                            CSIField = "MobileNumber",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 77,
                            CSIField = "EmailAddress",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 78,
                            CSIField = "FullAddress",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 79,
                            CSIField = "StreetNo",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 80,
                            CSIField = "StreetName",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 81,
                            CSIField = "CityTown",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 82,
                            CSIField = "ZipCode",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 83,
                            CSIField = "Country",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 84,
                            CSIField = "IsCompany",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 85,
                            CSIField = "CsiConsent",
                            CSIFieldType = "Customer",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 86,
                            CSIField = "QuoteId",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 87,
                            CSIField = "JobId",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 88,
                            CSIField = "isQuoteApproved",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 89,
                            CSIField = "SundriesCost",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 90,
                            CSIField = "WasteDisposalCost",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 91,
                            CSIField = "TotalAdditionalCosts",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 92,
                            CSIField = "LabourPaintAmt",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 93,
                            CSIField = "PaintMaterialAmt",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 94,
                            CSIField = "TotalLabourAmt",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 95,
                            CSIField = "DiscountPercentage",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 96,
                            CSIField = "DiscountAmount",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 97,
                            CSIField = "PaintSupplies",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 98,
                            CSIField = "ShopSupplies",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 99,
                            CSIField = "AudatexTotalExVat",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 100,
                            CSIField = "AudatexGrandTotalInclVat",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 101,
                            CSIField = "rateAgreementId",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 102,
                            CSIField = "Obid",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        },
                        new
                        {
                            WorkshopCSIFieldId = 103,
                            CSIField = "LastModified",
                            CSIFieldType = "Quote",
                            IsEnabled = true
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopCSIPackage", b =>
                {
                    b.Property<int>("WorkshopCSIPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkshopCSIPackageId");

                    b.Property<string>("CSIPackage")
                        .HasColumnType("longtext");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("WorkshopCSIPackageId");

                    b.ToTable("WorkshopCSIPackage");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopEmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EmailType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WorkshopEmailType");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopInsurerRate", b =>
                {
                    b.Property<int>("rateAgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rateAgreementId");

                    b.Property<int>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsOutOfWarrantyRate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsWarrantyRate")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("PaintSundryPercent")
                        .HasColumnType("double");

                    b.Property<double?>("PartSundryPercent")
                        .HasColumnType("double");

                    b.Property<int>("capturedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTimeCaptured")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("labourRate")
                        .HasColumnType("double");

                    b.Property<double>("msrRate")
                        .HasColumnType("double");

                    b.Property<double>("nsrRate")
                        .HasColumnType("double");

                    b.Property<double>("paintRate")
                        .HasColumnType("double");

                    b.Property<double>("partsMarkup")
                        .HasColumnType("double");

                    b.Property<string>("rateDescription")
                        .HasColumnType("longtext");

                    b.Property<double>("stripAssemblyRate")
                        .HasColumnType("double");

                    b.Property<int>("workshopId")
                        .HasColumnType("int");

                    b.HasKey("rateAgreementId");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("WorkshopInsurerRates");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopNotes", b =>
                {
                    b.Property<int>("WorkshopNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommunicationType")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IsWorkshopNote")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("WorkshopNoteId");

                    b.ToTable("WorkshopNotes");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopNotifcations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationGuid")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("workshop_notifications");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopSmsTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MessageBody")
                        .HasColumnType("longtext");

                    b.Property<string>("MessageType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WorkshopSmsTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MessageBody = "Good Day from [WORKSHOP] Your claim has been approved and your vehicle will be repaired by [WORKSHOP] Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "Vehicle Booked In"
                        },
                        new
                        {
                            Id = 2,
                            MessageBody = "Good Day from [WORKSHOP]. Your vehicle [REGNUMBER] is now currently in [WORKSHOPDEPARTMENT]. We will continue to provide an update as your vehicle nears completion. Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "WIP Progress"
                        },
                        new
                        {
                            Id = 3,
                            MessageBody = "Good day from [WORKSHOP]. Your vehicle [REGNUMBER] is still in [WORKSHOPDEPARTMENT] as we are waiting for back order parts to arrive. Will keep you posted as soon as parts arrive. Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "WIP Parts B/O"
                        },
                        new
                        {
                            Id = 4,
                            MessageBody = "Good Day from [WORKSHOP]. Your vehicle [REGNUMBER] is currently in [WORKSHOPDEPARTMENT]. Once complete, you will receive a call to arrange collection. Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "Final Inspection"
                        },
                        new
                        {
                            Id = 5,
                            MessageBody = "Good Day from [WORKSHOP]. Your vehicle [REGNUMBER] is Ready for Collection. Your excess is R [EXCESSVALUE] Please collect between 10 AM and 4 PM. We regret that we cannot accept cheques/fleet or garage cards. EFT Payments are welcome, but must be made two days before collection so the funds can reflect in our bank account. Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "RTC"
                        },
                        new
                        {
                            Id = 6,
                            MessageBody = "Good Day from [WORKSHOP]. Please contact [USERSNAME] to arrange a booking date for your vehicle. Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "Arrange a booking"
                        },
                        new
                        {
                            Id = 7,
                            MessageBody = "Good Day from [WORKSHOP]. We are still waiting for the outstanding parts on your vehicle [REGNUMBER]. We will keep you posted. Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "Waiting for parts"
                        },
                        new
                        {
                            Id = 8,
                            MessageBody = "Good Day from [WORKSHOP]. Our banking details: [BANKNAME] Account Type: [ACCOUNTTYPE] Account No: [ACCOUNTNUMBER] , Branch Code: [BRANCHCODE], Ref: [REGNUMBER] Please send proof to {_______}. Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "Banking Details"
                        },
                        new
                        {
                            Id = 9,
                            MessageBody = "Good Day from [WORKSHOP]. We have received the outstanding parts for your vehicle [REGNUMBER]. Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "Received Outstanding Parts"
                        },
                        new
                        {
                            Id = 10,
                            MessageBody = "Good Day from [WORKSHOP]. The parts for your vehicle are on order, and you will be notified upon arrival. Regards [USERSNAME] - [WORKSHOPTELEPHONE]",
                            MessageType = "Parts On Order"
                        },
                        new
                        {
                            Id = 11,
                            MessageBody = "Good day [Client]. Your vehicle [MAKE] [MODEL] was recently repaired at [WORKSHOP]. Please take a few minutes to rate your experience.",
                            MessageType = "Send Survey"
                        });
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopSurveyAnswer", b =>
                {
                    b.Property<int>("WorkshopSurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkshopSurveyAnswerId");

                    b.Property<string>("Answer")
                        .HasColumnType("longtext");

                    b.Property<int>("AnswerTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsDelete")
                        .HasColumnType("longtext");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyMasterId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopSurveyQuestionId")
                        .HasColumnType("int");

                    b.HasKey("WorkshopSurveyAnswerId");

                    b.ToTable("WorkshopSurveyAnswers");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopSurveyQuestion", b =>
                {
                    b.Property<int>("WorkshopSurveyQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkshopSurveyQuestionId");

                    b.Property<int>("AnswerTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Question")
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("WorkshopSurveyQuestionId");

                    b.ToTable("WorkshopSurveyQuestions");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopVehicleManufacurerApprovals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("VehicleMakeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("workshop_vehicle_manufacturer_approvals");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Workshops", b =>
                {
                    b.Property<int>("WorkshopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("longtext");

                    b.Property<string>("AddressCode")
                        .HasColumnType("longtext");

                    b.Property<string>("AddressName")
                        .HasColumnType("longtext");

                    b.Property<string>("AddressNumber")
                        .HasColumnType("longtext");

                    b.Property<bool?>("AllowDiscountOnInvoice")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AllowDiscountOnQuotation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AllowStatusToBeAssignedToMultipleUsers")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("AutoMxId")
                        .HasColumnType("int");

                    b.Property<string>("AzContainerName")
                        .HasColumnType("longtext");

                    b.Property<string>("BamsPassword")
                        .HasColumnType("longtext");

                    b.Property<string>("BamsWorkshopCode")
                        .HasColumnType("longtext");

                    b.Property<string>("CityAddress")
                        .HasColumnType("longtext");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DBConnectionString")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("FullAddress")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsVatVendor")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double");

                    b.Property<string>("LightstoneCsiCompanyCode")
                        .HasColumnType("longtext");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("PostalAddressLine1")
                        .HasColumnType("longtext");

                    b.Property<string>("PostalAddressLine2")
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("SmsKey")
                        .HasColumnType("longtext");

                    b.Property<string>("SmsUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("SuburbAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("TwilioAccoundSID")
                        .HasColumnType("longtext");

                    b.Property<string>("TwilioAuthToken")
                        .HasColumnType("longtext");

                    b.Property<string>("VatNumber")
                        .HasColumnType("longtext");

                    b.Property<double?>("VatPercentage")
                        .HasColumnType("double");

                    b.Property<string>("WhatsAppNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkshopLogo")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkshopName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("WorkshopId");

                    b.HasIndex("CountryId");

                    b.ToTable("Workshops", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NMOHUM.API.Models.AccountingExpenses", b =>
                {
                    b.HasOne("NMOHUM.API.Models.AccountingExpenseCategories", "ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.CompanyBranch", "CompanyBranch")
                        .WithMany("AccountingExpenses")
                        .HasForeignKey("CompanyBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("ExpenseCreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.Jobs", "Jobs")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.Employee", "PaidByEmployee")
                        .WithMany()
                        .HasForeignKey("MarkedAsPaidBy");

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.PaymentMethod", "PaymentMethod")
                        .WithMany("AccountingExpenses")
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Employee");

                    b.Navigation("ExpenseCategory");

                    b.Navigation("Jobs");

                    b.Navigation("PaidByEmployee");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("NMOHUM.API.Models.AlternateContact", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Customer", "Customer")
                        .WithMany("AlternateContact")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NMOHUM.API.Models.AssesorCompany", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Assessor", "Assessors")
                        .WithMany("AssesorCompany")
                        .HasForeignKey("AssessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessors");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ClientVehicle", b =>
                {
                    b.HasOne("NMOHUM.API.Models.ReferenceModels.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.Make", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.ModelType", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Make");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ClientVehicles", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Customer", "Customer")
                        .WithMany("ClientVehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ClientVehicle", "Vehicle")
                        .WithMany("ClientVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Employee", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("NMOHUM.API.Models.Workshops", "Workshop")
                        .WithMany()
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("NMOHUM.API.Models.EmployeeWorkshops", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.Workshops", "Workshop")
                        .WithMany("EmployeeWorkshops")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("NMOHUM.API.Models.InsuranceClaim", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Broker", null)
                        .WithMany("InsuranceClaim")
                        .HasForeignKey("BrokerId");

                    b.HasOne("NMOHUM.API.Models.CompanyBranch", "CompanyBranch")
                        .WithMany("InsuranceClaims")
                        .HasForeignKey("CompanyBranchId");

                    b.HasOne("NMOHUM.API.Models.Jobs", "Job")
                        .WithMany("InsuranceClaim")
                        .HasForeignKey("JobId");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("NMOHUM.API.Models.JobActivities", b =>
                {
                    b.HasOne("NMOHUM.API.Models.ReferenceModels.ActivityStatus", "ActivityStatus")
                        .WithMany()
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.Jobs", "Job")
                        .WithMany("JobActivities")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityStatus");

                    b.Navigation("DepartmentType");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("NMOHUM.API.Models.JobCards", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Jobs", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.QuoteItemType", "QuoteItemType")
                        .WithMany()
                        .HasForeignKey("QuoteItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("QuoteItemType");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Jobs", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Customer", "Customer")
                        .WithMany("Jobs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedById");

                    b.HasOne("NMOHUM.API.Models.JobTypes", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("NMOHUM.API.Models.ClientVehicle", "Vehicle")
                        .WithMany("Jobs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.Workshops", "Workshop")
                        .WithMany("Jobs")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("EditedBy");

                    b.Navigation("JobType");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Labour", b =>
                {
                    b.HasOne("NMOHUM.API.Models.QuoteItem", "QuoteItem")
                        .WithMany()
                        .HasForeignKey("QuoteItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.RepairMethod", "RepairMethod")
                        .WithMany("Labours")
                        .HasForeignKey("RepairMethodId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("QuoteItem");

                    b.Navigation("RepairMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Outwork", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Jobs", "Jobs")
                        .WithMany("Outwork")
                        .HasForeignKey("JobsJobId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Jobs");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Paint", b =>
                {
                    b.HasOne("NMOHUM.API.Models.QuoteItem", "QuoteItem")
                        .WithMany()
                        .HasForeignKey("QuoteItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.RepairMethod", "RepairMethod")
                        .WithMany()
                        .HasForeignKey("RepairMethodId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("QuoteItem");

                    b.Navigation("RepairMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMOHUM.API.Models.PaintedPanels", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Jobs", null)
                        .WithMany("PaintedPanels")
                        .HasForeignKey("JobsJobId");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Part", b =>
                {
                    b.HasOne("NMOHUM.API.Models.QuoteItem", "QuoteItem")
                        .WithMany()
                        .HasForeignKey("QuoteItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.RepairMethod", "RepairMethod")
                        .WithMany()
                        .HasForeignKey("RepairMethodId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("QuoteItem");

                    b.Navigation("RepairMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Payment", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Jobs", null)
                        .WithMany("Payments")
                        .HasForeignKey("JobsJobId");

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.PaidByType", "PaidByType")
                        .WithMany("Payments")
                        .HasForeignKey("PaidByTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.PaymentFor", "PaymentFor")
                        .WithMany("Payment")
                        .HasForeignKey("PaymentForId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.PaymentMethod", "PaymentMethod")
                        .WithMany("Payment")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PaidByType");

                    b.Navigation("PaymentFor");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Quote", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Jobs", "Job")
                        .WithOne("Quote")
                        .HasForeignKey("NMOHUM.API.Models.Quote", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("NMOHUM.API.Models.QuoteItem", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Quote", "Quotes")
                        .WithMany("QuoteItems")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.ReferenceModels.QuoteItemType", "QuoteItemType")
                        .WithMany()
                        .HasForeignKey("QuoteItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuoteItemType");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.JobStatus", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Jobs", "Jobs")
                        .WithMany()
                        .HasForeignKey("JobsJobId");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.ModelType", b =>
                {
                    b.HasOne("NMOHUM.API.Models.ReferenceModels.Make", "Make")
                        .WithMany("ModelTypes")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Make");
                });

            modelBuilder.Entity("NMOHUM.API.Models.SuppliedParts", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Part", null)
                        .WithMany("SuppliedParts")
                        .HasForeignKey("PartId");

                    b.HasOne("NMOHUM.API.Models.CompanyBranch", "PartsSupplier")
                        .WithMany()
                        .HasForeignKey("PartsSupplierCompanyBranchId");

                    b.HasOne("NMOHUM.API.Models.QuoteItem", "QuoteItem")
                        .WithOne("SuppliedParts")
                        .HasForeignKey("NMOHUM.API.Models.SuppliedParts", "QuoteItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartsSupplier");

                    b.Navigation("QuoteItem");
                });

            modelBuilder.Entity("NMOHUM.API.Models.TatSchedule", b =>
                {
                    b.HasOne("NMOHUM.API.Models.ReferenceModels.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMOHUM.API.Models.Jobs", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentType");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("NMOHUM.API.Models.TowingDetails", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Jobs", "Job")
                        .WithMany("TowingDetails")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("NMOHUM.API.Models.UserTokens", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMOHUM.API.Models.WorkshopInsurerRate", b =>
                {
                    b.HasOne("NMOHUM.API.Models.CompanyBranch", "CompanyBranch")
                        .WithMany()
                        .HasForeignKey("CompanyBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Workshops", b =>
                {
                    b.HasOne("NMOHUM.API.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NMOHUM.API.Models.AccountingExpenseCategories", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Assessor", b =>
                {
                    b.Navigation("AssesorCompany");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Broker", b =>
                {
                    b.Navigation("InsuranceClaim");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ClientVehicle", b =>
                {
                    b.Navigation("ClientVehicles");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("NMOHUM.API.Models.CompanyBranch", b =>
                {
                    b.Navigation("AccountingExpenses");

                    b.Navigation("InsuranceClaims");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Customer", b =>
                {
                    b.Navigation("AlternateContact");

                    b.Navigation("ClientVehicles");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("NMOHUM.API.Models.JobTypes", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Jobs", b =>
                {
                    b.Navigation("InsuranceClaim");

                    b.Navigation("JobActivities");

                    b.Navigation("Outwork");

                    b.Navigation("PaintedPanels");

                    b.Navigation("Payments");

                    b.Navigation("Quote");

                    b.Navigation("TowingDetails");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Part", b =>
                {
                    b.Navigation("SuppliedParts");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Quote", b =>
                {
                    b.Navigation("QuoteItems");
                });

            modelBuilder.Entity("NMOHUM.API.Models.QuoteItem", b =>
                {
                    b.Navigation("SuppliedParts");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.Make", b =>
                {
                    b.Navigation("ModelTypes");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.PaidByType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.PaymentFor", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.PaymentMethod", b =>
                {
                    b.Navigation("AccountingExpenses");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NMOHUM.API.Models.ReferenceModels.RepairMethod", b =>
                {
                    b.Navigation("Labours");
                });

            modelBuilder.Entity("NMOHUM.API.Models.Workshops", b =>
                {
                    b.Navigation("EmployeeWorkshops");

                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
